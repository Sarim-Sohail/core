{"version":3,"file":"index.js","sources":["../src/utils/getKey.ts","../src/utils/groupBy.tsx","../src/features/define/utils/Model.ts","../src/features/localization/bidi.ts","../src/features/annotation/types/annotations/Annotation.tsx","../src/features/annotation/types/annotations/ContainerAnnotation.tsx","../src/features/annotation/types/annotations/EventAnnotation.tsx","../src/features/annotation/types/annotations/ModuleAnnotation.tsx","../src/features/annotation/types/annotations/PropertyAnnotation.tsx","../src/features/annotation/types/annotations/StyleAnnotation.tsx","../src/features/annotation/consts.ts","../src/features/annotation/utils/builders/BaseBuilder.ts","../src/features/annotation/utils/builders/TypedBuilder.ts","../src/features/annotation/utils/builders/ArrayBuilder.ts","../src/features/annotation/utils/builders/QuantifierBuilder.ts","../src/features/annotation/utils/builders/OneOfBuilder.ts","../src/features/annotation/utils/builders/SomeOfBuilder.ts","../src/features/annotation/utils/builders/AnnotationBuilder.ts","../src/features/annotation/utils/index.ts","../src/features/annotation/utils/builders/NodeAnnotationBuilder.ts","../src/features/annotation/utils/isUniqueKey.tsx","../src/features/annotation/index.tsx","../src/utils/AsyncFunction.ts","../src/features/event/types.ts","../src/features/event/consts/index.ts","../src/features/event/utils/ActionEventArgs.ts","../src/features/define/constants.ts","../src/features/define/utils/Meta.ts","../src/consts.ts","../src/utils/observableNaming.ts","../src/stores/ComponentStore.ts","../src/utils/index.ts","../src/features/localization/getFluentCompatibleId.ts","../src/features/localization/isFluentVariable.ts","../src/features/localization/getFluentData.ts","../src/utils/createNonNullableContext.tsx","../src/utils/SyncEvent.ts","../src/utils/treeUtils.ts","../src/utils/contexts/ComponentDataContext.tsx","../src/utils/contexts/StoreContext.tsx","../src/features/form-viewer/components/ViewerPropsContext.ts","../src/features/annotation/toArray.ts","../src/features/annotation/toStyleProperties.ts","../src/utils/useSafeState.ts","../src/features/licensing/assemblyDate.ts","../src/features/licensing/consts.ts","../src/features/licensing/utils.ts","../src/features/licensing/verifySign.ts","../src/features/licensing/TrialMessage.tsx","../src/features/localization/emotionCache.ts","../src/features/localization/ViewerLocalizationProvider.tsx","../src/features/ui/SuppressResizeObserverErrors.tsx","../src/features/event/utils/EventStream.ts","../src/features/ui/ComponentTreeContext.ts","../src/utils/CalculableResult.ts","../src/features/calculation/propertyCalculator.ts","../src/stores/ComponentState.tsx","../src/utils/needRender.ts","../src/utils/getChildren.tsx","../src/utils/useTooltipType.ts","../src/utils/useWrapperState.ts","../src/features/tooltip/TooltipWrapper.tsx","../src/utils/useErrorModel.ts","../src/features/validation/components/Erroneous.tsx","../src/features/validation/utils/DataValidator.ts","../src/features/ui/DefaultWrapper.tsx","../src/features/ui/ComponentViewer.tsx","../src/features/ui/ComponentTreeItem.tsx","../src/features/ui/ComponentTree.tsx","../src/features/form-viewer/components/Viewer.tsx","../src/features/form-viewer/CustomActions.ts","../src/stores/FormViewerPropsStore.ts","../src/features/event/consts/actions.ts","../src/features/ui/PropertyBlockType.ts","../src/features/localization/localizer.ts","../src/features/localization/types.ts","../src/features/ui/screenModel.tsx","../src/features/ui/internalErrorModel.tsx","../src/features/ui/templateUtil.ts","../src/features/validation/utils/ruleBuilder.ts","../src/features/validation/rules/zodAnyToValidator.ts","../src/features/validation/rules/ZodArrayRules.ts","../src/features/validation/rules/ZodBooleanRules.ts","../src/features/validation/rules/ZodDateRules.ts","../src/features/validation/rules/ZodNumberRules.ts","../src/features/validation/rules/ZodObjectRules.ts","../src/features/validation/rules/ZodStringRules.ts","../src/features/validation/utils/consts.tsx","../src/features/validation/utils/autoConvertField.ts","../src/features/validation/utils/validatorsResolver.tsx","../src/features/validation/utils/SimpleField.ts","../src/features/validation/utils/util.ts","../src/features/validation/utils/TemplateField.ts","../src/utils/generateUniqueName.ts","../src/stores/Form.ts","../src/stores/LocalizationStore.ts","../src/stores/PersistedForm.ts","../src/stores/Store.ts","../src/utils/useDisposable.ts","../src/utils/useForwardRef.ts","../src/features/form-viewer/components/ViewerStoreProvider.tsx","../src/features/form-viewer/setupMobx.ts","../src/features/form-viewer/FormViewer.tsx","../src/features/template/templateModel.tsx","../src/features/template/slotModel.tsx","../src/features/template/slotMeta.tsx","../src/features/template/templateMeta.tsx","../src/features/define/utils/View.ts","../src/features/define/utils/Definer.ts","../src/features/validation/components/DefaultErrorMessage.tsx","../src/features/components/internalErrorMeta.tsx","../src/features/components/screenMeta.tsx","../src/features/validation/errorMessageMeta.ts","../src/features/define/utils/BuilderView.ts","../src/utils/IFormData.ts","../src/features/annotation/utils/LabeledValue.ts","../src/utils/resourceLoader.ts"],"sourcesContent":["/**\n * Generates the random string. **Internal use only.**\n * @returns the generated random string.\n */\nexport const getKey = () => {\n  return (Math.random() * 1e18).toString(36).slice(0, 5).toUpperCase() + ''\n}\n","/**\n * Groups the array of values by function predicate. **Internal use only.**\n * @param array the array of values.\n * @param predicate the function that returns a string to group the values of the array.\n * @returns the Record with grouped values.\n */\nexport function groupBy<T>(array: T[], predicate: (value: T, index: number, array: T[]) => string) {\n  return array.reduce((acc, value, index, array) => {\n    (acc[predicate(value, index, array)] ||= []).push(value)\n    return acc\n  }, {} as Record<string, T[]>)\n}\n","import {observer} from 'mobx-react'\nimport type {ComponentType} from 'react'\nimport {Css} from '../../style/types'\nimport type {SchemaType} from '../../validation'\nimport type {ActionsInitializer, ComponentKind} from '../types'\n\n/**\n * Represents component metadata for the form viewer.\n * @template T the type of React component properties.\n */\nexport class Model<T = any> {\n  readonly #name?: string\n  /**\n   * The React component.\n   */\n  readonly component: ComponentType<T>\n\n  /**\n   * Creates component metadata for the form viewer.\n   * @param component the React component.\n   * @param name the component name.\n   * @param actionsInitializer the function to initialize actions in the component.\n   * @param valued the name of the component property where the component value is stored.\n   * @param valueType the type of the component value.\n   * @param defaultProps the component's default property values.\n   * @param css the component's CSS values.\n   * @param wrapperCss the component's wrapper CSS values.\n   * @param typeName the component type name.\n   * @param icon the component icon.\n   * @param kind the component kind.\n   * @template T the type of React component properties.\n   */\n  constructor(\n    component: ComponentType<T>,\n    name?: string,\n    readonly actionsInitializer?: ActionsInitializer,\n    readonly valued?: string,\n    readonly valueType?: SchemaType,\n    readonly defaultProps?: Readonly<Record<string, any>>,\n    readonly css?: Css,\n    readonly wrapperCss?: Css,\n    readonly typeName?: string,\n    readonly icon?: ComponentType,\n    readonly kind: ComponentKind = 'component'\n  ) {\n    this.component = observer(component)\n    this.component.displayName = component.displayName || component.name\n    this.#name = name\n  }\n\n  /**\n   * @returns the component name, or type if there is no component name.\n   */\n  get name() {\n    return this.#name ?? this.type\n  }\n\n  /**\n   * @returns the component type name.\n   */\n  get type(): string {\n    return this.typeName || this.component.displayName || this.component.name\n  }\n}\n","/**\n * The enumeration of bidirectional text layout types.\n */\nexport enum BiDi {\n\n  /**\n   * Left to right.\n   */\n  LTR = 'ltr',\n\n  /**\n   * Right to left.\n   */\n  RTL = 'rtl',\n}\n","import type {ReactNode} from 'react'\nimport type {RuleValidator, SchemaType} from '../../../validation'\nimport type {ErrorMap} from '../../../validation/ErrorMap'\nimport type {EditorType} from './EditorType'\n\n/**\n * Basic metadata class for a React component property for the form builder.\n */\nexport class Annotation {\n\n  /**\n   * The component property key.\n   */\n  readonly key: string\n\n  /**\n   * The component property name.\n   */\n  readonly name: string\n\n  /**\n   * The name of the component's property editor.\n   */\n  readonly editor!: EditorType\n\n  /**\n   * The hint for the component property.\n   */\n  readonly hint?: ReactNode\n\n  /**\n   * True if the property value can be localized, false otherwise.\n   */\n  readonly localizable: boolean = false\n\n  /**\n   * True if the property value is bound to form data, false otherwise.\n   */\n  readonly valued: boolean = false\n\n  /**\n   * Additional properties for the component property editor.\n   */\n  readonly editorProps?: any\n\n  /**\n   * The default property value.\n   */\n  readonly default?: any\n\n  /**\n   * The data type for the value of the property.\n   */\n  readonly type?: SchemaType\n\n  /**\n   * True if the component property is required, false otherwise.\n   */\n  readonly required: boolean = false\n\n  /**\n   * The function for validating the property value.\n   */\n  readonly validator?: RuleValidator\n\n  /**\n   * Message and/or error code for the validation function.\n   */\n  readonly errorMap?: ErrorMap\n\n  /**\n   * True if the property value can be a calculated property, false otherwise.\n   */\n  readonly calculable: boolean = true\n\n  /**\n   * A function that returns a string containing the source code of the function to bind child components.\n   * @param props the properties of the component, which are available only inside Form Builder Designer.\n   */\n  readonly slotConditionBuilder?: (props: any) => string\n\n  /**\n   * Creates metadata for a React component property.\n   * @param key the property name.\n   * @param name the human-readable property name.\n   */\n  constructor(key: string, name: string) {\n    this.key = key\n    this.name = name\n  }\n\n  /**\n   * @returns the metadata clone.\n   */\n  clone() {\n    return Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this))\n  }\n}\n","import {Annotation} from './Annotation'\n\n/**\n * Metadata for the component container property for the form builder.\n * The Container property of a component can contain other React components.\n */\nexport class ContainerAnnotation extends Annotation {\n}\n","import {Annotation} from './Annotation'\n\n/**\n * Metadata for the component event property for the form builder.\n */\nexport class EventAnnotation extends Annotation {\n}\n","import {Annotation} from './Annotation'\n\n/**\n * Metadata for a component property that is not a property of the component itself,\n * but is supplied by the form builder.\n */\nexport class ModuleAnnotation extends Annotation {\n}\n","import {LabeledValue} from '../../utils/LabeledValue'\nimport {Annotation} from './Annotation'\n\n/**\n * Metadata for the component property for the form builder.\n */\nexport class PropertyAnnotation extends Annotation {\n  /**\n   * Possible values for the property.\n   */\n  data!: LabeledValue[]\n}\n\n/**\n * Type predicate, asserts that the value is an instance of PropertyAnnotation. **Internal use only.**\n * @param value the value.\n * @returns true if the value is an instance of PropertyAnnotation, false otherwise.\n */\nexport const isProperty = (value: Annotation): value is PropertyAnnotation => {\n  return value instanceof PropertyAnnotation\n}\n","import {Annotation} from './Annotation'\n\n/**\n * Metadata for the component style property for the form builder.\n */\nexport class StyleAnnotation extends Annotation {\n}\n","import {AnnotationType} from './types'\nimport {Annotation} from './types/annotations/Annotation'\nimport {ContainerAnnotation} from './types/annotations/ContainerAnnotation'\nimport {EventAnnotation} from './types/annotations/EventAnnotation'\nimport {ModuleAnnotation} from './types/annotations/ModuleAnnotation'\nimport {PropertyAnnotation} from './types/annotations/PropertyAnnotation'\nimport {StyleAnnotation} from './types/annotations/StyleAnnotation'\n\nexport const AnnotationMap: Record<AnnotationType, typeof Annotation> = {\n  Property: PropertyAnnotation,\n  Container: ContainerAnnotation,\n  Event: EventAnnotation,\n  Module: ModuleAnnotation,\n  Style: StyleAnnotation,\n}\n","import {assign, clone as lodashClone, startCase} from 'lodash-es'\nimport type {ReactNode} from 'react'\nimport {AnnotationMap} from '../../consts'\nimport {AnnotationType} from '../../types'\nimport {Annotation} from '../../types/annotations/Annotation'\n\n/**\n * Options for building an annotation.\n */\nexport class BuilderOptions {\n  /**\n   * Type of component property description in the form builder.\n   */\n  annotationType: AnnotationType = 'Module'\n  /**\n   * Flag if true, the property name will be automatically converted in the designer from a camel case string to a human-readable string.\n   */\n  autoName = true\n}\n\n/**\n * Type for component property metadata without the 'key' property, but with the 'editor' property.\n */\nexport type PreAnnotation = Partial<Omit<Annotation, 'key'>> & Pick<Annotation, 'editor'>\n\n/**\n * The type representing custom options for the component's property metadata builder.\n */\nexport type BuilderSetup = Partial<PreAnnotation & BuilderOptions>\n\n/**\n * The base builder class to define the metadata property of the form builder component.\n * @template T the property type.\n */\nexport class BaseBuilder<T> {\n  /**\n   * Partial metadata for a component property.\n   */\n  annotation!: PreAnnotation\n  /**\n   * Options for building an annotation.\n   */\n  options = new BuilderOptions()\n\n  /**\n   * @returns the main component property that is used as form data and for validation rules.\n   */\n  get valued() {\n    return this.setup({valued: true})\n  }\n\n  /**\n   * @returns the component property that can be localized.\n   */\n  get localize() {\n    return this.setup({localizable: true})\n  }\n\n  /**\n   * @returns the non-localizable component property.\n   */\n  get notLocalize() {\n    return this.setup({localizable: false})\n  }\n\n  /**\n   * Specifies the name of the component property.\n   * @param name the property name.\n   * @returns the modified instance of the builder.\n   */\n  named(name: string) {\n    return this.setup({name})\n  }\n\n  /**\n   * Adds the hint to the property name of the component.\n   * @param hint the hint.\n   * @returns the modified instance of the builder.\n   */\n  hinted(hint: ReactNode) {\n    return this.setup({hint})\n  }\n\n  /**\n   * Marks the component property as calculable.\n   * @param calculable true if the property is calculable.\n   * @returns the modified instance of the builder.\n   */\n  calculable(calculable: boolean) {\n    return this.setup({calculable})\n  }\n\n  /**\n   * Modifies the component property metadata builder with custom options.\n   * @param options the custom options.\n   * @returns the modified instance of the builder.\n   */\n  setup(options: BuilderSetup): this {\n    const {annotationType, autoName, ...annotation} = options\n    const clone = this.clone()\n    clone.options.annotationType = annotationType ?? clone.options.annotationType\n    clone.options.autoName = autoName ?? clone.options.autoName\n    assign(clone.annotation, annotation)\n    return clone\n  }\n\n  /**\n   * Clones the instance of the builder.\n   * @returns the cloned instance of the builder.\n   */\n  clone(): this {\n    const clone = lodashClone(this)\n    clone.options = lodashClone(this.options)\n    clone.annotation = lodashClone(this.annotation)\n    clone.annotation ??= {} as PreAnnotation\n    return clone\n  }\n\n  /**\n   * Creates component property metadata for the form builder.\n   * @param key the unique key of the component property.\n   * @returns the instance of the component property metadata for the form builder.\n   */\n  build(key: string): Annotation {\n    const name = this.getName(key)\n    const annotation = new AnnotationMap[this.options.annotationType](key, name)\n    assign(annotation, this.annotation)\n    return annotation\n  }\n\n  /**\n   * Sets custom properties for the component's property editor.\n   * @param props the custom properties\n   * @returns the modified instance of the builder.\n   */\n  withEditorProps(props: any): this {\n    const clone = this.clone()\n    assign(clone.annotation, {editorProps: props})\n    return clone\n  }\n\n  /**\n   * Returns the annotation name.\n   * @param key the property name\n   * @returns the annotation name.\n   */\n  protected getName(key: string) {\n    return this.annotation.name ?? (this.options.autoName ? startCase(key) : key)\n  }\n}\n\n","import type {RuleValidator} from '../../../validation'\nimport type {ErrorMap} from '../../../validation/ErrorMap'\nimport {BaseBuilder} from './BaseBuilder'\n\n/**\n * The builder class to define the metadata property of the form builder component.\n * Used for properties where the property value can be validated.\n * @template T the property type.\n */\nexport class TypedBuilder<T> extends BaseBuilder<T> {\n\n  /**\n   * Marks the component property as required.\n   * @returns the modified instance of the builder.\n   */\n  get required(): TypedBuilder<NonNullable<T>> {\n    return this.setup({required: true}) as TypedBuilder<NonNullable<T>>\n  }\n\n  /**\n   * Sets the default value for the component property.\n   * @param value the default value.\n   * @returns the modified instance of the builder.\n   */\n  default(value: T): this {\n    return this.setup({default: value})\n  }\n\n  /**\n   * Modifies the component property metadata builder with validation properties.\n   * @param validator the validation function.\n   * @param errorMap the validation error settings.\n   * @returns the modified instance of the builder.\n   */\n  validated(validator: RuleValidator<T>, errorMap: ErrorMap): this {\n    return this.setup({validator, errorMap})\n  }\n}\n","import type {SchemaType} from '../../../validation'\nimport {TypedBuilder} from './TypedBuilder'\n\n/**\n * The builder class to define the metadata property of the form builder component.\n * Used for properties where the property value is an array.\n * @template T the property type.\n */\nexport class ArrayBuilder<T> extends TypedBuilder<T> {\n  subType?: SchemaType\n\n  /**\n   * Sets the component's value type to an array of strings.\n   * @returns the modified instance of the builder.\n   */\n  get ofString() {\n    const builder = new ArrayBuilder<string[] | undefined>()\n      .setup({...this.options, ...this.annotation, type: 'array', editor: 'arrayOfString'})\n    builder.subType = 'string'\n    return builder\n  }\n\n  /**\n   * Sets the component's value type to an array of objects.\n   * @returns the modified instance of the builder.\n   */\n  get ofObject() {\n    const builder = new ArrayBuilder<object[] | undefined>()\n      .setup({...this.options, ...this.annotation, type: 'array'})\n    builder.subType = 'object'\n    return builder\n  }\n}\n","import {startCase} from 'lodash-es'\nimport {Annotation} from '../../types/annotations/Annotation'\nimport {PropertyAnnotation} from '../../types/annotations/PropertyAnnotation'\nimport {TypedBuilder} from './TypedBuilder'\n\n/**\n * The abstract builder class to define the metadata property of the form builder component.\n * Used for properties where the property value can be selected from predefined values.\n * @template T the property type.\n */\nexport abstract class QuantifierBuilder<T> extends TypedBuilder<T> {\n  /**\n   * Possible values for the property.\n   */\n  values!: (string | number)[]\n  /**\n   * Labels for the possible values of the property.\n   */\n  labels?: string[]\n\n  /**\n   * Marks the component property as required.\n   * @returns the modified instance of the builder.\n   */\n  get required(): QuantifierBuilder<NonNullable<T>> {\n    return super.required as QuantifierBuilder<NonNullable<T>>\n  }\n\n  /**\n   * Sets the labels for predefined values.\n   * @param labels the labels.\n   * @returns the modified instance of the builder.\n   */\n  labeled(...labels: string[]) {\n    const clone = this.clone()\n    clone.labels = labels\n    return clone\n  }\n\n  /**\n   * Creates component property metadata for the form builder.\n   * @param key the unique key of the component property.\n   * @returns the instance of the component property metadata for the form builder.\n   */\n  build(key: string): Annotation {\n    const result = super.build(key) as PropertyAnnotation\n    result.data = this.values.map((value, index) => {\n      const label = this.labels?.[index] ?? startCase(value.toString())\n      return {label, value}\n    })\n\n    return result\n  }\n\n  /**\n   * Sets the default value for the component property.\n   * @param value the default value, can be an array of values.\n   * @returns the modified instance of the builder.\n   */\n  default(value: T | T[]): this {\n    return this.setup({default: value})\n  }\n}\n","import {QuantifierBuilder} from './QuantifierBuilder'\n\n/**\n * The builder class to define the metadata property of the form builder component.\n * Used for properties where the property value can be selected from one of the predefined values.\n * @template T the property type.\n */\nexport class OneOfBuilder<T> extends QuantifierBuilder<T> {\n\n  /**\n   * Sets the radio buttons as the component's property editor.\n   * @returns the modified instance of the builder.\n   */\n  radio() {\n    return this.setup({editor: 'radio'})\n  }\n\n  /**\n   * Sets the default value for the component property.\n   * @param value the default value.\n   * @returns the modified instance of the builder.\n   */\n  default(value: T): this {\n    return super.default(value)\n  }\n}\n","import {QuantifierBuilder} from './QuantifierBuilder'\n\n/**\n * The builder class to define the metadata property of the form builder component.\n * Used for properties where the property value can be a set of predefined values.\n * @template T the property type.\n */\nexport class SomeOfBuilder<T> extends QuantifierBuilder<T> {\n\n  /**\n   * Sets the default value for the component property.\n   * @param value the default value.\n   * @returns the modified instance of the builder.\n   */\n  default(value: T[]): this {\n    return super.default(value)\n  }\n}\n","import type {SchemaType, SchemaTypeMap} from '../../../validation'\nimport type {EditorType} from '../../types/annotations/EditorType'\nimport {ArrayBuilder} from './ArrayBuilder'\nimport {BaseBuilder} from './BaseBuilder'\nimport {OneOfBuilder} from './OneOfBuilder'\nimport {SomeOfBuilder} from './SomeOfBuilder'\nimport {TypedBuilder} from './TypedBuilder'\n\n/**\n * The builder class to define the metadata property of the form builder component.\n * @template T the property type.\n */\nexport class AnnotationBuilder<T> extends BaseBuilder<T> {\n\n  /**\n   * Creates a component property metadata builder.\n   * @param editor the property editor type.\n   * @template T the property type.\n   */\n  constructor(editor: EditorType) {\n    super()\n    this.annotation = {editor}\n  }\n\n  /**\n   * Creates a component property metadata builder.\n   * @param editor the property editor type.\n   * @template T the property type.\n   * @returns the component property metadata builder.\n   */\n  static create = <T>(editor: EditorType) => new this<T>(editor)\n\n  /**\n   * Sets the property as a \"array\" property.\n   * @returns the instance of the metadata property builder.\n   */\n  get array() {\n    return new ArrayBuilder<T[] | undefined>()\n      .setup({...this.options, ...this.annotation, type: 'array'})\n  }\n\n  /**\n   * Sets the field type for the component property.\n   * @param type the field type.\n   * @returns the instance of the metadata property builder.\n   */\n  typed<T extends SchemaType>(type: T) {\n    return new TypedBuilder<SchemaTypeMap[T] | undefined>()\n      .setup({...this.options, ...this.annotation, type})\n  }\n\n  /**\n   * Sets the property as a \"single select\" property.\n   * @param values the possible values for the property.\n   * @returns the instance of the metadata property builder.\n   */\n  oneOf<U extends string | number>(...values: U[]) {\n    const result = new OneOfBuilder<U>().setup({...this.options, ...this.annotation, type: 'enum'})\n    result.values = values\n    return result\n  }\n\n  /**\n   * Sets the property as a \"multiple select\" property.\n   * @param values the possible values for the property.\n   * @returns the instance of the metadata property builder.\n   */\n  someOf<U extends string | number>(...values: U[]) {\n    const result = new SomeOfBuilder<U>().setup({...this.options, ...this.annotation, type: 'enum'})\n    result.values = values\n    return result\n  }\n}\n","import type {FirstParameter} from '../types'\nimport {Annotation} from '../types/annotations/Annotation'\nimport {ContainerAnnotation} from '../types/annotations/ContainerAnnotation'\nimport {AnnotationBuilder} from './builders/AnnotationBuilder'\n\n/**\n * Type predicate, asserts that the value is an instance of ContainerAnnotation. **Internal use only.**\n * @param value the value.\n * @returns true if the value is an instance of ContainerAnnotation, false otherwise.\n */\nexport const isContainer = (value: Annotation): value is ContainerAnnotation => {\n  return value instanceof ContainerAnnotation\n}\n\nexport const createAnnotation = AnnotationBuilder.create\n\n/**\n * Creates an instance of the builder class to define the property's metadata.\n * @param editor editor type for editing the property.\n * @returns the instance of the builder class to define the property's metadata.\n */\nexport function createProperty(editor: FirstParameter<typeof createAnnotation>) {\n  return createAnnotation(editor).setup({annotationType: 'Property'})\n}\n\n/**\n * Extracts component properties default values from annotations . **Internal use only.**\n * @param annotations the array of component annotations.\n * @returns the object containing component properties default values.\n */\nexport function getDefault(annotations: Annotation[]): Readonly<Record<string, any>> {\n  return annotations.reduce((props, an) => {\n    props[an.key] = an.default\n    return props\n  }, {} as Record<string, any>)\n}\n\n/**\n * Extracts CSS properties default values from annotations . **Internal use only.**\n * @param annotations the array of component annotations.\n * @returns the object with CSS properties default values.\n */\nexport function getDefaultCss(annotations: Annotation[]): Readonly<Record<string, any>> {\n  return ({\n    any: {\n      object: getDefault(annotations)\n    }\n  })\n}\n","import type {EditorType} from '../../types/annotations/EditorType'\nimport {AnnotationBuilder} from './AnnotationBuilder'\n\n/**\n * The builder class to define the node metadata property.\n * @template T the property type.\n */\nexport class NodeAnnotationBuilder<T> extends AnnotationBuilder<T> {\n\n  /**\n   * Creates a component property metadata builder.\n   * @param editor the property editor type.\n   * @template T the property type.\n   */\n  constructor(editor: EditorType) {\n    super(editor)\n  }\n\n  /**\n   * Specifies a function that will create conditions that check if a child component can be bound to a parent slot.\n   * @param slotConditionBuilder the function that returns a string containing the source code of the function to bind child components.\n   * @returns the instance of the metadata property builder.\n   */\n  withSlotConditionBuilder(slotConditionBuilder: (props: any) => string): this {\n    return this.setup({slotConditionBuilder})\n  }\n}\n\n/**\n * Creates a component property metadata builder.\n * @param editor the property editor type.\n * @template T the property type.\n * @returns the NodeAnnotationBuilder instance.\n */\nexport function createNodeAnnotation<T>(editor: EditorType) {\n  return new NodeAnnotationBuilder<T>(editor)\n}\n\n","import type {RuleValidator} from '../../validation'\n\n/**\n * Returns true if the component key is unique across the entire component tree. **Internal use only.**\n * @param value the component key.\n * @param store the form viewer settings.\n * @returns true if the component key is unique across the entire component tree.\n */\nexport const isUniqueKey: RuleValidator<string> = (value, store) =>\n  1 === store.reduceScreen((acc, cd) => cd.key === value ? acc + 1 : acc, 0)\n","import type {ReactNode} from 'react'\nimport {createAnnotation, createProperty} from './utils'\nimport {createNodeAnnotation} from './utils/builders/NodeAnnotationBuilder'\nimport {isUniqueKey} from './utils/isUniqueKey'\n\n/**\n * The annotation for the 'key' property of the component.\n */\nexport const key = createAnnotation('key')\n  .typed('string')\n  .required\n  .hinted('Unique component key')\n  .calculable(false)\n  .validated(isUniqueKey, {code: 'unique_key', message: 'The key must be unique!'})\n  .build('key')\n\n/**\n * The annotation builder for the 'key' property of a component.\n */\nexport const htmlAttributes = createAnnotation('htmlAttributes')\n\n/**\n * The annotation builder for arbitrary HTML attributes of a component.\n */\nexport const validation = createAnnotation('validation')\n\n/**\n * The annotation builder for a component property with type 'string'.\n */\nexport const string = createProperty('string').typed('string').localize\n\n/**\n * The annotation builder for a component property with type 'boolean'.\n */\nexport const boolean = createProperty('boolean').typed('boolean')\n\n/**\n * The annotation builder for a component property with type 'number'.\n */\nexport const number = createProperty('number').typed('number')\n\n/**\n * The annotation builder for a component property with type 'CSS unit' (width, height, etc.).\n */\nexport const size = createProperty('size').typed('string')\n\n/**\n * The annotation builder for a component property with type 'Date'.\n */\nexport const date = createProperty('date').typed('date')\n\n/**\n * The annotation builder for a component property with type 'Array'.\n */\nexport const array = createProperty('array').array\n\n/**\n * The annotation builder for a component property with type 'color' (e.g. rgba(71, 167, 122, 0.72)).\n */\nexport const color = createProperty('color').typed('string')\n\n/**\n * The annotation builder for the form property describing the type of form tooltip.\n */\nexport const tooltipType = createAnnotation('tooltipType').typed('string')\n\n/**\n * The annotation builder for a component property containing a CSS dimension.\n */\nconst cssSize = createAnnotation('size').setup({calculable: false})\n\n/**\n * The annotation builder for a component property containing a CSS color.\n */\nconst cssColor = createAnnotation('color').setup({calculable: false})\n\n/**\n * The annotation builder for the component property containing the CSS class name.\n */\nexport const className = createProperty('string')\n  .calculable(true)\n  .build('className')\n\n/**\n * The annotation builder for a component property with type 'event' (or event handler, or just a function).\n */\nexport const event = createAnnotation<Function>('event').setup({annotationType: 'Event'})\n\n/**\n * The annotation builder for a component property with type 'ReactNode'.\n */\nexport const node = createNodeAnnotation<ReactNode>('node').setup({annotationType: 'Container'})\n\n/**\n * The annotation builder for a component property with type 'enum', the property value can only be one of enum.\n */\nexport const oneOf = createProperty('oneOf').oneOf.bind(createProperty('oneOf'))\n\n/**\n * The annotation builder for a component property with type 'enum', the property value can contain multiple enum values.\n */\nexport const someOf = createProperty('someOf').someOf.bind(createProperty('someOf'))\n\n/**\n * The annotation builder for component tooltip properties.\n */\nexport const tooltipProps = createAnnotation('tooltipProps')\n\n/**\n * The annotation builder for the synthetic 'renderWhen' property of the component.\n */\nexport const renderWhen = createAnnotation('renderWhen').typed('boolean')\n\n/**\n * The annotations for generic CSS properties of a component.\n */\nexport const commonStyles = {\n  width: cssSize.setup({default: '100%'}),\n  height: cssSize,\n  marginTop: cssSize,\n  marginRight: cssSize,\n  marginBottom: cssSize,\n  marginLeft: cssSize,\n  color: cssColor,\n  backgroundColor: cssColor,\n}\n\n/**\n * The annotations for generic CSS properties of a container component.\n */\nexport const containerStyles = {\n  flexDirection: oneOf('column', 'row', 'column-reverse', 'row-reverse'),\n  gap: size,\n  alignItems: oneOf('start', 'center', 'baseline', 'end', 'stretch'),\n  justifyContent: oneOf('flex-start', 'flex-end', 'center', 'space-between', 'space-around',\n    'space-evenly', 'start', 'end', 'left', 'right'),\n  flexWrap: oneOf('wrap', 'nowrap', 'wrap-reverse')\n}\n\nexport * from './utils'\n","/**\n * Asynchronous function constructor.\n */\nexport const AsyncFunction = async function () {}.constructor;\n","import {KeySymbol} from '../../consts'\nimport {AsyncFunction} from '../../utils/AsyncFunction'\n\n/**\n * The type for the event name.\n */\nexport type EventName = string\n\n/**\n * The type for the parameter name.\n */\nexport type ParameterName = string\n\n/**\n * Parameter type.\n */\nexport type ParameterType = 'string' | 'number' | 'boolean'\n\n/**\n * Represents a set of action parameters.\n */\nexport type ActionParameters = Record<ParameterName, ParameterType>\n\n/**\n * The type of the argument value of the function.\n */\nexport type ArgumentValue = string | number | boolean\n\n/**\n * Action type.\n */\nexport type ActionType = 'common' | 'code' | 'custom'\n\n/**\n * It will be transformed in arguments before passing in action.\n */\nexport type Arguments = Record<ParameterName, ArgumentValue>\n\n/**\n * Action Storage.\n * Used for add a new action, store information about it.\n */\nexport type ActionData = {\n  /**\n   * The unique action key.\n   */\n  [KeySymbol]?: string\n  /**\n   * The action name.\n   */\n  name: string\n  /**\n   * The action type.\n   */\n  type: ActionType\n  /**\n   * The action arguments.\n   */\n  args?: Arguments\n}\n\n/**\n * Represents a set of action definitions.\n */\nexport type ActionValues = Record<string, ActionDefinition>\n\n/**\n * Represents a named action definition.\n */\nexport type NamedActionDefinition = {\n  /**\n   * The name of action definition.\n   */\n  name: string\n  /**\n   * The definition of an action.\n   */\n  actionDefinition: ActionDefinition\n}\n\n/**\n * Represents the definition of an action.\n */\nexport class ActionDefinition {\n\n  /**\n   * Creates a new instance of the ActionDefinition class.\n   * @param func the function of an action.\n   * @param body the source code of the Action.\n   * @param params the parameters of the Action.\n   */\n  constructor(\n    public readonly func: Func,\n    public readonly body?: string,\n    public readonly params: ActionParameters = {},\n  ) {\n  }\n\n  /**\n   * Creates an action from the function.\n   * @param func the function of an action.\n   * @param params the parameters of the Action.\n   * @returns the new instance of the ActionDefinition class.\n   */\n  static functionalAction(func: Func, params: ActionParameters = {}): ActionDefinition {\n    return new ActionDefinition(func, undefined, params)\n  }\n\n  /**\n   * Creates an action from the source code.\n   * @param body the source code of the Action.\n   * @param params the parameters of the Action.\n   * @returns the new instance of the ActionDefinition class.\n   */\n  static sourceAction(body: string, params: ActionParameters = {}): ActionDefinition {\n    const func = AsyncFunction('e, args', body)\n    return new ActionDefinition(func, body, params)\n  }\n\n  /**\n   * Correctly creates the {@link ActionDefinition} from deserialized data.\n   * @param value the deserialized data.\n   * @returns the ActionDefinition instance.\n   */\n  static createFromObject(value: any) {\n    return ActionDefinition.sourceAction(value.body, value.params)\n  }\n}\n\n/**\n * Converts the input object to an ActionValues object. **Internal use only.**\n * @param obj the input object.\n * @returns the converted ActionValues object.\n */\nexport const createActionValuesFromObject = (obj: any) => {\n  const result: ActionValues = {}\n  if (!obj) return result\n\n  Object.keys(obj).forEach(key => {\n    const value = obj[key]\n    result[key] = ActionDefinition.createFromObject(value)\n  })\n  return result\n}\n\n/**\n * The type of arbitrary function that returns void or Promise&lt;void&gt;.\n */\nexport type Func = (...arg: any[]) => void | Promise<void>\n","/**\n * The DidMountEvent event name.\n */\nexport const DidMountEvent = 'onDidMount'\n\n/**\n * The WillUnmountEvent event name.\n */\nexport const WillUnmountEvent = 'onWillUnmount'\n","import type {SyntheticEvent} from 'react'\nimport {ComponentState} from '../../../stores/ComponentState'\nimport {Store} from '../../../stores/Store'\nimport {ComponentData} from '../../../utils/contexts/ComponentDataContext'\n\nfunction createComponentDataProxy(componentData: ComponentData) {\n  return new Proxy(componentData, {\n    get(target, property: string) {\n      if (property === 'toJSON') return () => target.data\n      return target.data[property]\n    },\n    set(target, property: string, value): boolean {\n      target.fields.get(property)?.setValue(value)\n      return true\n    }\n  })\n}\n\n/**\n * Arguments passed to the event handler.\n */\nexport class ActionEventArgs {\n  #componentDataProxy: any\n\n  /**\n   * The component properties that were used to render the sender component.\n   */\n  renderedProps: Record<string, any>\n\n  /**\n   * Creates arguments for the event handler.\n   * @param type the event type.\n   * @param sender the component that triggered the event.\n   * @param store the form viewer settings.\n   * @param args the event arguments.\n   * @param state the {@link ComponentState} instance.\n   */\n  constructor(\n    readonly type: string,\n    readonly sender: ComponentData,\n    readonly store: Store,\n    readonly args: any[],\n    state: ComponentState\n  ) {\n    this.renderedProps = state.get\n    this.#componentDataProxy = createComponentDataProxy(this.store.formData)\n  }\n\n  /**\n   * Sets user-defined properties for the React component that override other properties of the component.\n   * @param props the component properties.\n   */\n  setUserDefinedProps = (props?: Record<string, any>) => {\n    this.sender.userDefinedProps = props\n  }\n\n  /**\n   * @returns the event handled by the event handler.\n   */\n  get event(): SyntheticEvent | null {\n    return this.args.find(this.#isEvent)\n  }\n\n  /**\n   * @returns the first element of the event argument array, which is treated as a value.\n   */\n  get value() {\n    return this.args.filter(v => typeof v !== 'undefined').find(this.#isNotEvent)\n  }\n\n  /**\n   * @returns the object for reading and changing form data.\n   */\n  get data(): Record<string, unknown> {\n    return this.#componentDataProxy\n  }\n\n  #isEvent = (value: any) => Boolean(value && value.target && value.type && value.preventDefault)\n  #isNotEvent = (value: any) => !this.#isEvent(value)\n}\n\n/**\n * Description of the event argument type for the code editor.\n */\nexport const ActionEventArgsDeclaration = `\n/**\n * Arguments passed to the event handler.\n */\ndeclare class ActionEventArgs {\n\n  /**\n   * The event type.\n   */\n  readonly type: string\n\n  /**\n   * The component that triggered the event.\n   */\n  readonly sender: ComponentData\n  \n  /**\n   * The component properties that were used to render the sender component.\n   */\n  readonly renderedProps: Record<string, any>\n  \n  /**\n   * Sets current props of component.\n   */\n  readonly setUserDefinedProps: (props: Record<string, any>) => void\n\n  /**\n   * The form viewer settings.\n   */\n  readonly store: Store\n\n  /**\n   * The event arguments.\n   */\n  readonly args: any[]\n\n  /**\n   * @returns the event handled by the event handler.\n   */\n  get event(): SyntheticEvent | null\n\n  /**\n   * @returns the first element of the event argument array, which is treated as a value.\n   */\n  get value(): any\n  \n  /**\n   * @returns the object for reading and changing form data.\n   */\n  get data(): Record<string, unknown>\n}\n`\n","import {event, htmlAttributes, renderWhen, tooltipProps, validation} from '../annotation'\nimport {Annotation} from '../annotation/types/annotations/Annotation'\nimport {DidMountEvent, WillUnmountEvent} from '../event'\n\n/**\n * Common metadata for the component for the form builder.\n */\nexport const modules: Annotation[] = [\n  tooltipProps.build('tooltipProps'),\n  renderWhen.build('renderWhen'),\n  htmlAttributes.build('htmlAttributes'),\n  validation.build('validation'),\n  event.build(DidMountEvent),\n  event.build(WillUnmountEvent),\n]\n","import type {ReactNode} from 'react'\nimport {Annotation} from '../../annotation/types/annotations/Annotation'\nimport type {ComponentKind} from '../types'\n\n/**\n * Component metadata for the form builder.\n */\nexport class Meta {\n  /**\n   * Creates the component metadata for the form builder.\n   * @param type the component type name.\n   * @param properties the component's properties metadata.\n   * @param css the component's CSS metadata.\n   * @param wrapperCss the component's wrapper CSS metadata.\n   * @param modules common metadata for the component.\n   * @param customPreview the custom ReactNode to be drawn on the toolbar.\n   * @param valuedAn the metadata for the component value.\n   * @param kind the component kind.\n   */\n  constructor(\n    readonly type: string,\n    readonly properties: Annotation[],\n    readonly css: Annotation[],\n    readonly wrapperCss: Annotation[],\n    readonly modules: Annotation[],\n    readonly customPreview?: ReactNode,\n    readonly valuedAn?: Annotation,\n    readonly kind: ComponentKind = 'component',\n  ) {\n  }\n}\n","/**\n * The unique Symbol for the key property.\n */\nexport const KeySymbol = Symbol('key')\n","/**\n * Computes the autorun name based on the owner, name, and parameters. **Internal use only.**\n * @param owner the owner of the autorun.\n * @param name the name of the autorun.\n * @param params the parameters for specific autorun.\n * @returns the computed autorun name.\n */\nexport function nameAutorun(owner: string, name: string, params: Record<string, any> = {}) {\n  return nameObservableEntity('autorun', owner, name, params)\n}\n\n/**\n * Computes the observable name based on the owner, name, and parameters. **Internal use only.**\n * @param owner the owner of the observable.\n * @param params the parameters for specific observable.\n * @returns the computed observable name.\n */\nexport function nameObservable(owner: string, params: Record<string, any> = {}) {\n  return nameObservableEntity('observable', owner, undefined, params)\n}\n\nfunction nameObservableEntity(observableName: string, owner: string, name?: string, params: Record<string, any> = {}) {\n  const paramsString = Object.keys(params)\n    .map(key => `${key}=${params[key]}`)\n    .join('_')\n  return `${observableName}_${owner}_${name ? `${name}_` : ''}${paramsString}`\n}\n","import {assign} from 'lodash-es'\nimport {makeAutoObservable} from 'mobx'\nimport {KeySymbol} from '../consts'\nimport {ActionData, EventName} from '../features/event'\nimport {Css} from '../features/style/types'\nimport type {BoundValueSchema} from '../features/validation'\nimport {nameObservable} from '../utils/observableNaming'\n\nlet actionDataCounter = 0\n\nfunction initActionDataKey(actionData: ActionData) {\n  if (actionData[KeySymbol]) return\n  ++actionDataCounter\n  actionData[KeySymbol] = `actionData_${actionDataCounter}`\n}\n\nfunction initActionDataKeys(componentStore: ComponentStore) {\n  const events = componentStore.events\n  if (events) {\n    Object.values(events)\n      .forEach(data => data.forEach(initActionDataKey))\n  }\n  componentStore.children?.forEach(initActionDataKeys)\n}\n\n/**\n * The component property value type.\n */\nexport type ComponentPropertyComputeType = 'function' | 'localization'\n\n/**\n * The value of the component property.\n */\nexport interface ComponentProperty {\n  /**\n   * The simple value of a component property.\n   */\n  value?: any\n  /**\n   * Source code of the function for calculating the value of a component property.\n   */\n  fnSource?: string\n  /**\n   * Type of the component's calculated property. If not specified - the value from value is used.\n   */\n  computeType?: ComponentPropertyComputeType\n}\n\n/**\n * Returns true if the property value is calculated by the function, otherwise false. **Internal use only.**\n * @param componentProperty the component property.\n * @returns true if the property value is calculated by the function, otherwise false.\n */\nexport function isFunctionalProperty(componentProperty?: ComponentProperty) {\n  return componentProperty?.computeType === 'function'\n}\n\n/**\n * Returns true if the property value is localized, otherwise false. **Internal use only.**\n * @param componentProperty the component property.\n * @returns true if the property value is localized, otherwise false.\n */\nexport function isLocalizedProperty(componentProperty?: ComponentProperty) {\n  return componentProperty?.computeType === 'localization'\n}\n\n/**\n * The arbitrary HTML attributes for the component.\n */\nexport type HtmlAttribute = Record<string, string>\n\n//No functions here\n/**\n * Component settings for serialization in JSON.\n */\nexport class ComponentStore {\n\n  /**\n   * The React component key.\n   */\n  key = ''\n\n  /**\n   * The component type of the form viewer.\n   */\n  type = ''\n\n  /**\n   * The component properties.\n   */\n  props: Record<string, ComponentProperty> = {}\n\n  /**\n   * The component CSS styles.\n   */\n  css?: Css\n\n  /**\n   * The component wrapper CSS styles.\n   */\n  wrapperCss?: Css\n\n  /**\n   * The set of event handlers.\n   */\n  events?: Record<EventName, ActionData[]>\n\n  /**\n   * The array of child components.\n   */\n  children?: ComponentStore[]\n\n  /**\n   * The component value validation settings.\n   */\n  schema?: BoundValueSchema\n\n  /**\n   * The set of arbitrary HTML attributes added to the component.\n   */\n  htmlAttributes?: HtmlAttribute[]\n\n  /**\n   * The tooltip settings.\n   */\n  tooltipProps?: Record<string, ComponentProperty>\n\n  /**\n   * The name of the occupied component property in the parent component.\n   */\n  slot?: string\n\n  /**\n   * The condition for binding a child element to a parent element.\n   */\n  slotCondition?: string\n\n  /**\n   * The expression or function to conditionally render a component.\n   */\n  renderWhen?: ComponentProperty\n\n  /**\n   * Creates the component settings.\n   * @param key the React component key.\n   * @param type the component type of the form viewer.\n   */\n  constructor(key: string, type: string) {\n    this.key = key\n    this.type = type\n    makeAutoObservable(this, undefined, {name: nameObservable('ComponentStore', {key: key})})\n  }\n\n  /**\n   * Correctly creates the {@link ComponentStore} from deserialized data.\n   * @param value the deserialized data.\n   * @returns the component Store.\n   */\n  static createFromObject(value: any) {\n    const result = assign(new ComponentStore(value.key, value.type), value)\n    initActionDataKeys(result)\n    return result\n  }\n\n  /**\n   * Adds the event handler for component.\n   * @param store the target {@link ComponentStore}.\n   * @param eventName the target event name.\n   * @param data the {@link ActionData}.\n   */\n  static addEventHandler(store: ComponentStore, eventName: string, data: ActionData) {\n    initActionDataKey(data)\n    store.events ??= {}\n    store.events[eventName] ??= []\n    store.events[eventName].push(data)\n  }\n}\n","import {observer} from 'mobx-react'\nimport type {FunctionComponent} from 'react'\nimport {ComponentStore} from '../stores/ComponentStore'\n\n/**\n * Type predicate, asserts that the value is a string. **Internal use only.**\n * @param value the value.\n * @returns true if the value is a string, false otherwise.\n */\nexport function isString(value: any): value is string {\n  return typeof value === 'string'\n}\n\n/**\n * Type predicate, asserts that the value is a number. **Internal use only.**\n * @param value the value.\n * @returns true if the value is a number, false otherwise.\n */\nexport function isNumber(value: any): value is number {\n  return typeof value === 'number'\n}\n\n/**\n * Type predicate, asserts that the value is a Promise. **Internal use only.**\n * @param value the value.\n * @returns true if the value is a Promise, false otherwise.\n */\nexport function isPromise<T = any>(value: any): value is Promise<T> {\n  return typeof value === 'object' && typeof value.then === 'function'\n}\n\n/**\n * Type predicate, asserts that the value is a {@link Record}. **Internal use only.**\n * @param value the value.\n * @returns true if the value is a Record, false otherwise.\n */\nexport function isRecord(value: any): value is Record<string, unknown> {\n  return typeof value === 'object'\n}\n\n/**\n * Creates the observable React component. **Internal use only.**\n * @param displayName the displayName value of the React component.\n * @param component the React component.\n * @returns the observable React component.\n */\nexport function namedObserver<T extends FunctionComponent<any>>(displayName: string, component: T) {\n  const observerComponent = observer(component)\n  observerComponent.displayName = displayName\n  return observerComponent\n}\n\n/**\n * The empty component settings object. **Internal use only.**\n */\nexport const emptyComponentStore = new ComponentStore('', '')\n","/**\n * Converts the raw id to a Fluent compatible id, i.e. replaces all the spaces with underscores. **Internal use only.**\n * @param rawId some raw id.\n * @returns the Fluent compatible id.\n */\nexport const getFluentCompatibleId = (rawId: string) => {\n  return rawId.replace(new RegExp(' ', 'g'), '_')\n}\n","import type {FluentVariable} from '@fluent/bundle/esm/bundle'\nimport {FluentType} from '@fluent/bundle/esm/types.js'\n\n/**\n * The type checker for the {@link FluentVariable} type.\n * @param value the value to check.\n * @returns true if the value is a {@link FluentVariable} type, false otherwise.\n */\nexport const isFluentVariable = (value: any): value is FluentVariable => {\n  if (typeof value === 'string' || typeof value === 'number' || value instanceof Date) {\n    return true\n  }\n\n  return typeof (value as FluentType<unknown>)?.value !== 'undefined'\n}\n","import type {FluentVariable} from '@fluent/bundle/esm/bundle'\nimport {getFluentCompatibleId} from './getFluentCompatibleId'\nimport {isFluentVariable} from './isFluentVariable'\n\n/**\n * Converts the form data to a Fluent compatible. **Internal use only.**\n * @param data the form data.\n * @returns all the form data that is of the FluentVariable type.\n * Additionally, the keys of the returned object are converted to the snake case.\n */\nexport const getFluentData = (data: Record<string, unknown>) => {\n  const fluentData: Record<string, FluentVariable> = {}\n  for (const [key, value] of Object.entries(data)) {\n    if (isFluentVariable(value)) {\n      fluentData[getFluentCompatibleId(key)] = value\n    }\n  }\n  return fluentData\n}\n","import {Context, createContext, Provider, useContext} from 'react'\n\n/**\n * Creates non-nullable React context. **Internal use only.**\n * @param name the context name.\n * @returns the tuple [hook, provider, and common context] for interactions with a non-nullable context.\n */\nexport function createNonNullableContext<T>(name: string): [() => T, Provider<T>, Context<T | null>] {\n  const context = createContext<T | null>(null)\n  context.displayName = name\n\n  const hook = createContextHook(context)\n  const provider = createProvider(context)\n\n  return [hook, provider, context]\n}\n\nfunction createContextHook<T, >(context: Context<T>) {\n  return () => {\n    const value = useContext(context)\n\n    if (!value) throw new Error(`The context ${context.displayName} didn't found!`)\n\n    return value\n  }\n}\n\nfunction createProvider<T, >(context: Context<T | null>) {\n  const value = context as Context<T>\n  return value.Provider\n}\n","/**\n * Represents a synchronous event handler.\n * @template TSender the type of the event source.\n * @template TEventArgs the type of the event arguments.\n */\nexport type SyncEventHandler<TSender, TEventArgs> = (source: TSender, eventArgs: TEventArgs) => void\n\n/**\n * Represents a synchronous event that can be subscribed to and invoked. **Internal use only.**\n * @template TSender the type of the object that raises the event.\n * @template TEventArgs the type of the event arguments.\n */\nexport class SyncEvent<TSender, TEventArgs> {\n  private handlers: Array<SyncEventHandler<TSender, TEventArgs>> = []\n\n  /**\n   * Adds a handler to the list of subscribers.\n   * @param handler the handler function to be added.\n   */\n  public subscribe(handler: SyncEventHandler<TSender, TEventArgs>): void {\n    this.handlers.push(handler)\n  }\n\n  /**\n   * Removes the specified event handler from the list of handlers.\n   * @param handler the event handler to remove.\n   */\n  public unsubscribe(handler: SyncEventHandler<TSender, TEventArgs>): void {\n    this.handlers = this.handlers.filter(h => h !== handler)\n  }\n\n  /**\n   * Returns true if the object has subscribers, false otherwise.\n   * @returns true if the object has handlers registered for events, otherwise returns false.\n   */\n  get isSubscribed(): boolean {\n    return this.handlers.length > 0\n  }\n\n  /**\n   * Invokes the event by calling all registered event handlers.\n   * @param sender the sender of the event.\n   * @param eventArgs the event arguments.\n   */\n  public invoke(sender: TSender, eventArgs: TEventArgs): void {\n    // Duplicate the array to avoid side effects during iteration.\n    this.handlers.slice().forEach(handler => handler(sender, eventArgs))\n  }\n\n  /**\n   * Dispose method to release all handlers.\n   */\n  public dispose() {\n    this.handlers = []\n  }\n}\n","/**\n * Executes a given function on each node of a tree. **Internal use only.**\n * @param tree the root node of the tree.\n * @param fn the function to be executed on each node of the tree.\n */\nexport function treeForEach<T extends { children?: T[] }>(tree: T, fn: (treeNode: T) => void) {\n  fn(tree)\n  tree.children?.forEach(child => treeForEach(child, fn))\n}\n\n/**\n * Finds the depth of a given element in a tree. **Internal use only.**\n * @param value the root of the tree.\n * @param element the element to find the depth of.\n * @param depth the current depth of the tree (optional, default is 0).\n * @returns the depth of the element in the tree, or undefined if the element is not found.\n */\nexport function findTreeElementDepth<T extends { children?: T[] }>(value: T, element?: T, depth = 0): number | undefined {\n  if (value === element) return depth\n\n  if (!value.children) return\n\n  depth = depth + 1\n  for (const child of value.children) {\n    const childNode = findTreeElementDepth(child, element, depth)\n    if (childNode) return childNode\n  }\n}\n","import {isArray, isEmpty, merge} from 'lodash-es'\nimport {IReactionDisposer, makeAutoObservable, reaction} from 'mobx'\nimport {Model} from '../../features/define'\nimport type {FormValidator, FormValidators} from '../../features/form-viewer/FormValidators'\nimport {getFluentData} from '../../features/localization/getFluentData'\nimport type {Field} from '../../features/validation'\nimport {ComponentStore} from '../../stores/ComponentStore'\nimport {createNonNullableContext} from '../createNonNullableContext'\nimport type {IFormData} from '../IFormData'\nimport {nameObservable} from '../observableNaming'\nimport {SyncEvent} from '../SyncEvent'\nimport {treeForEach} from '../treeUtils'\n\nlet counter = 0\n\nfunction generateId(prefix: string) {\n  return `${prefix}_${++counter}`\n}\n\n/**\n * Represents the event argument for the event when the component key changes.\n */\nexport class ComponentKeyChangedEventArgs {\n  /**\n   * Constructs a new instance of the ComponentKeyChangedEventArgs class.\n   * @param oldKey the old key.\n   * @param newKey the new key.\n   */\n  constructor(readonly oldKey: string, readonly newKey: string) {\n  }\n}\n\n/**\n * Represents a class that holds events related to component data.\n */\nexport class ComponentDataEvents {\n  /**\n   * An event that occurs after a component key change.\n   */\n  readonly onAfterKeyChanged: SyncEvent<ComponentData, ComponentKeyChangedEventArgs> = new SyncEvent()\n  /**\n   * An event that occurs before a component is removed from the component tree.\n   */\n  readonly onBeforeDelete: SyncEvent<ComponentData, undefined> = new SyncEvent()\n\n  /**\n   * Unsubscribe from all events.\n   */\n  dispose() {\n    this.onAfterKeyChanged.dispose()\n    this.onBeforeDelete.dispose()\n  }\n}\n\n/**\n * This tree of elements contains the data required to display the component. It is synchronized with the ComponentStore tree.\n */\nexport class ComponentData implements IFormData {\n  #disposers: IReactionDisposer[]\n  #events?: ComponentDataEvents\n  #formValidators?: FormValidators\n  private _state: Record<string, unknown> = {}\n  /**\n   * The unique identifier.\n   */\n  readonly id: string\n  /**\n   * The component settings.\n   */\n  readonly store: ComponentStore\n  /**\n   * The component metadata.\n   */\n  readonly model: Model\n  /**\n   * The field with the form data.\n   */\n  readonly field?: Field\n  /**\n   * The parent node in the component data tree.\n   */\n  parent?: ComponentData\n  /**\n   * The child nodes in the component data tree.\n   */\n  children: ComponentData[] = []\n\n  /**\n   * User defined properties of the React component.\n   */\n  userDefinedProps?: Record<string, any>\n\n  /**\n   * If true, then validation is in progress.\n   */\n  validating = false\n\n  /**\n   * Constructor.\n   * @param componentStore the component settings.\n   * @param model the component metadata for the form viewer.\n   * @param field the field with the form data.\n   * @param childFactory the factory function that creates {@link ComponentData} instance.\n   * @param formValidators the array of functions that validate the form data.\n   */\n  constructor(componentStore: ComponentStore, model: Model, field: Field | undefined,\n              childFactory: (componentStore: ComponentStore) => ComponentData, formValidators?: FormValidators) {\n    this.store = componentStore\n    this.model = model\n    this.field = field\n    this.id = generateId(this.model.type)\n    this.#formValidators = formValidators\n\n    componentStore.children?.forEach(childComponentStore => {\n      const child = childFactory(childComponentStore)\n      child.setParent(this)\n    })\n\n    makeAutoObservable(this, undefined, {name: nameObservable('ComponentData', {key: componentStore.key})})\n\n    const createKeyChangedReaction = () => {\n      return reaction(() => this.key, (key, oldKey) => {\n        this.invokeOnAfterKeyChanged(this, new ComponentKeyChangedEventArgs(oldKey, key))\n      })\n    }\n\n    this.#disposers = [createKeyChangedReaction()]\n  }\n\n  /**\n   * Sets the new parent for this node.\n   * @param newParent the new parent.\n   */\n  setParent(newParent: ComponentData) {\n    this.parent?.removeChild(this)\n    newParent.addChild(this)\n    this.parent = newParent\n  }\n\n  /**\n   * Inserts the given node after this node.\n   * @param inserted the node to insert.\n   */\n  insertAfterMe(inserted: ComponentData) {\n    this.insert(inserted, 'after')\n  }\n\n  /**\n   * Inserts the given node before this node.\n   * @param inserted the node to insert.\n   */\n  insertBeforeMe(inserted: ComponentData) {\n    this.insert(inserted, 'before')\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get state() {\n    return this._state\n  }\n\n  /**\n   * @returns the key of this node (same as the key of the ComponentStore).\n   */\n  get key(): string {\n    return this.store.key\n  }\n\n  /**\n   * @returns the ComponentDataEvents object.\n   */\n  get events(): ComponentDataEvents {\n    if (!this.#events) {\n      this.#events = new ComponentDataEvents()\n    }\n    return this.#events\n  }\n\n  /**\n   * Find the node with the given key.\n   * @param key the key to find.\n   * @returns the node or undefined if not found.\n   */\n  findByKey(key: string): ComponentData | undefined {\n    if (this.key === key) return this\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i]\n      const found = child.findByKey(key)\n      if (found) return found\n    }\n    return undefined\n  }\n\n  /**\n   * Assigns unique keys to the items in the tree.\n   * @param root the root of the tree to unify keys. Defaults to the root of this tree.\n   * @returns the map of new keys to old keys.\n   */\n  unifyKeys(root: ComponentData) {\n    const keysMap = new Map<string, string>()\n    const keysList: string[] = []\n    treeForEach(root, ({key}: ComponentData) => {\n      keysList.push(key)\n    })\n    treeForEach(this as ComponentData, item => {\n      let count = 1\n      const withCount = () => `${item.store.type} ${count}`\n      while (keysList.includes(withCount())) count++\n      const newKey = withCount()\n      keysMap.set(newKey, item.key)\n      item.store.key = newKey\n      keysList.push(newKey)\n    })\n    return keysMap\n  }\n\n  /**\n   * @returns all the fields in the tree as a map. Starts from this node.\n   */\n  get fields(): Map<string, Field> {\n    return this.collectAllFields(new Map<string, Field>())\n  }\n\n  /**\n   * Deletes this node from the tree.\n   */\n  delete() {\n    this.parent?.removeChild(this)\n    const allNodes = this.collectAllNodesAsArray([])\n    this.invokeOnBeforeDeleted(allNodes)\n    this.disposeNodes(allNodes)\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get data() {\n    const result: Record<string, unknown> = {}\n    for (const [key, field] of this.fields) {\n      if (field.storeDataInParentForm) {\n        const fieldValue: Record<string, any> = field.value || {}\n        Object.keys(fieldValue).forEach(i => result[i] = fieldValue[i])\n      } else {\n        result[key] = field.value\n      }\n    }\n    return result\n  }\n\n  /**\n   * @returns all the form data that is of the FluentVariable type.\n   * Additionally, the keys of the returned object are converted to the snake case.\n   */\n  get fluentData() {\n    const initializedData = initFormFields(this)\n    return getFluentData(initializedData)\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get errors() {\n    const result: Record<string, unknown> = {}\n    for (const [key, field] of this.fields) {\n      if (field.error) result[key] = field.error\n      const errors = field.errors\n      if (errors && field.storeDataInParentForm) Object.keys(errors).forEach(i => result[i] = errors[i])\n      if (errors && !field.storeDataInParentForm && Object.keys(errors).length > 0) result[key] = errors\n    }\n    return result\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get hasErrors() {\n    return Object.keys(this.errors).length > 0\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setAllErrors(message?: string) {\n    this.fields.forEach(f => f.error = message)\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async validate() {\n    this.validating = true\n    try {\n      await Promise.allSettled([...this.fields.values()].map(f => f.validate()))\n      if (!this.#formValidators) return\n\n      const fields = this.fields\n      const customValidatorPromises = this.#formValidators.map(v => v(this.data))\n      const results = await Promise.allSettled(customValidatorPromises)\n\n      results.map(result => {\n        if (result.status === 'rejected') {\n          console.error(result.reason)\n          return undefined\n        }\n        return result.value\n      }).forEach(resultValue => {\n        if (!resultValue) return\n        fields.forEach((field, key) => {\n          if (resultValue[key]) return field.setError(resultValue[key])\n          if (field.storeDataInParentForm) return field.setError(resultValue)\n        })\n      })\n    } finally {\n      this.validating = false\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async getValidationResult() {\n    let messages = undefined\n\n    const getFieldMessages = async ([key, field]: [key: string, field: Field]) => {\n      const result = await field.getValidationResult()\n      if (isEmpty(result)) return\n\n      messages ??= {}\n      let source = messages\n      if (!field.storeDataInParentForm) {\n        const initialValue = isArray(result) ? [] : {}\n        messages[key] ??= initialValue\n        source = messages[key]\n      }\n      merge(source, result)\n    }\n\n    const entries = [...this.fields.entries()]\n    await Promise.allSettled(entries.map(getFieldMessages))\n\n    if (!this.#formValidators) return messages\n\n    const getFormMessages = async (validator: FormValidator) => {\n      const result = await validator(this.data)\n      if (isEmpty(result)) return\n      messages ??= {}\n      merge(messages, result)\n    }\n\n    await Promise.allSettled(this.#formValidators.map(getFormMessages))\n\n    return messages\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get isValidating() {\n    return this.validating\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reset() {\n    this.fields.forEach(f => f.reset())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clear() {\n    this.fields.forEach(f => f.clear())\n  }\n\n  /**\n   * Dispose method that releases resources used by the object.\n   * It disposes the field and all the children objects.\n   */\n  dispose() {\n    const allNodes = this.collectAllNodesAsArray([])\n    this.disposeNodes(allNodes)\n  }\n\n  /**\n   * @returns true if it has no parent {@link ComponentData}, false otherwise.\n   */\n  get isRoot() {\n    return !this.parent\n  }\n\n  private insert(inserted: ComponentData, position: 'before' | 'after') {\n    const indexAddition = position === 'before' ? 0 : 1\n    if (!this.parent) {\n      throw new Error(`Cannot insert without parent. Key = ${this.key}`)\n    }\n    inserted.parent?.removeChild(inserted)\n    inserted.parent = this.parent\n    const children = this.parent.children\n    const index = children.indexOf(this)\n    if (index < 0) {\n      throw new Error(`Cannot insert not existing element into ComponentData. Key = ${this.key}`)\n    }\n    children.splice(index + indexAddition, 0, inserted)\n    this.parent.store.children ??= []\n    const storeChildren = this.parent.store.children\n    const storeIndex = storeChildren.indexOf(this.store)\n    if (storeIndex < 0) {\n      throw new Error(`Cannot insert not existing element into ComponentStore. Key = ${this.key}`)\n    }\n    storeChildren.splice(storeIndex + indexAddition, 0, inserted.store)\n    inserted.store.slot = this.store.slot\n    inserted.store.slotCondition = this.store.slotCondition\n  }\n\n  /**\n   * Disposes the nodes by calling the disposers, disposing the field,\n   * and resetting the parent and children properties to undefined and an empty array, respectively.\n   * @param nodes the array of ComponentData objects representing the nodes to dispose.\n   */\n  private disposeNodes(nodes: ComponentData[]) {\n    nodes.forEach(componentData => {\n      componentData.#events?.dispose()\n      componentData.#disposers.forEach(disposer => disposer())\n      componentData.field?.dispose()\n      componentData.parent = undefined\n      componentData.children = []\n    })\n  }\n\n  private collectAllNodesAsArray(acc: ComponentData[]) {\n    acc.push(this)\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i]\n      child.collectAllNodesAsArray(acc)\n    }\n    return acc\n  }\n\n  private collectAllFields(acc: Map<string, Field>) {\n    if (this.field) acc.set(this.key, this.field)\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i]\n      child.collectAllFields(acc)\n    }\n    return acc\n  }\n\n  private addChild(newChild: ComponentData) {\n    if (this.children.indexOf(newChild) < 0) {\n      this.children.push(newChild)\n    }\n    this.store.children ??= []\n\n    if (this.store.children.indexOf(newChild.store) < 0) {\n      this.store.children.push(newChild.store)\n    }\n  }\n\n  private removeChild(oldChild: ComponentData) {\n    const index = this.children.indexOf(oldChild)\n    if (index > -1) {\n      this.children.splice(index, 1)\n    }\n    this.store.children ??= []\n    const storeIndex = this.store.children.indexOf(oldChild.store)\n    if (storeIndex > -1) {\n      this.store.children.splice(storeIndex, 1)\n    }\n  }\n\n  private invokeOnAfterKeyChanged(node: ComponentData, eventArgs: ComponentKeyChangedEventArgs) {\n    if (this.#events?.onAfterKeyChanged.isSubscribed) {\n      this.#events.onAfterKeyChanged.invoke(node, eventArgs)\n    }\n    this.parent?.invokeOnAfterKeyChanged(node, eventArgs)\n  }\n\n  private invokeOnBeforeDeleted(nodes: ComponentData[]) {\n    if (this.#events?.onBeforeDelete.isSubscribed) {\n      nodes.forEach(node => this.#events?.onBeforeDelete.invoke(node, undefined))\n    }\n    this.parent?.invokeOnBeforeDeleted(nodes)\n  }\n}\n\n/**\n * Replaces empty form fields with an empty string. **Internal use only.**\n * @param form the form.\n * @returns all form data where empty fields are filled with empty strings.\n */\nexport const initFormFields = (form: ComponentData) => {\n  const result: Record<string, unknown> = {}\n  form.fields.forEach((field, key) => {\n    result[key] = form.data[key] ?? ''\n  })\n  return result\n}\n\nconst [\n  /**\n   * @returns the instance of the ComponentData of the currently rendered component.\n   */\n  useComponentData,\n  /**\n   * Context provider for the useComponentData hook. **Internal use only.**\n   */\n  ComponentDataProvider\n] = createNonNullableContext<ComponentData>('ComponentDataContext')\n\nexport {useComponentData, ComponentDataProvider}\n","import {Store} from '../../stores/Store'\nimport {createNonNullableContext} from '../createNonNullableContext'\n\nexport const [\n  /**\n   * **Internal use only.**\n   */\n  useStore,\n  /**\n   * **Internal use only.**\n   */\n  StoreProvider,\n  /**\n   * **Internal use only.**\n   */\n  StoreContext] = createNonNullableContext<Store>('StoreContext')\n","import {createNonNullableContext} from '../../../utils/createNonNullableContext'\n\nimport {FormViewerProps} from '../types'\n\nexport const [\n  /**\n   * **Internal use only.**\n   */\n  useViewerProps,\n  /**\n   * **Internal use only.**\n   */\n  ViewerPropsProvider] = createNonNullableContext<Readonly<FormViewerProps>>('FormViewerPropsContext')\n","import {reduce} from 'lodash-es'\nimport {string} from './index'\nimport {Annotation} from './types/annotations/Annotation'\nimport type {Annotations} from './utils/builders/Annotations'\nimport type {BuilderSetup} from './utils/builders/BaseBuilder'\n\n/**\n * Converts the object containing component property metadata into an array. **Internal use only.**\n * @param annotations the object containing component property metadata.\n * @param setup the custom options for the component's property metadata builder.\n * @returns the metadata array of the component properties.\n */\nexport function toArray<T extends object = any>(annotations?: Annotations<T>, setup: BuilderSetup = {}) {\n  return reduce(annotations, (prev: Annotation[], value, key) => {\n    prev.push(value?.setup(setup)?.build(key) ?? string.setup(setup).build(key))\n    return prev\n  }, [])\n}\n","import {toArray} from './toArray'\nimport type {Annotations} from './utils/builders/Annotations'\n\n/**\n * Converts the object containing component property metadata into an array of style properties. **Internal use only.**\n * @param annotations the object containing component property metadata.\n * @returns the object containing component properties default values.\n */\nexport function toStyleProperties(annotations?: Annotations<any>) {\n  return toArray(annotations, {annotationType: 'Style', calculable: false})\n}\n","import {Dispatch, SetStateAction, useCallback, useEffect, useMemo, useRef, useState} from 'react'\n\n/**\n * Sets a state only if its parent component is still mounted.\n * @param initialState the initial state\n * @returns a stateful value, and a function to update it.\n */\nexport default function useSafeState<S = undefined>(initialState?: S): [S | undefined, Dispatch<SetStateAction<S | undefined>>] {\n  const mountedRef = useRef(false)\n  const [state, setState] = useState<S | undefined>(initialState)\n\n  useEffect(() => {\n    mountedRef.current = true\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  const safeSetState: Dispatch<SetStateAction<S | undefined>> = useCallback(value => {\n    mountedRef.current && setState(value)\n  }, [])\n\n  return useMemo(() => [state, safeSetState], [state, safeSetState])\n}\n","export const assemblyDate = new Date(1718296034243)\n","export const separator = ':'\n\nexport const licenseSeparator = '-'\n\n// eslint-disable-next-line no-secrets/no-secrets\nexport const publicKeyPem = `MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEJDKWHzXT9YZw7WDJy4wr/VMXBf+/afNB\n  ppCLv1zZFVUQEmDRPhGC5nKux3WQcrtfl18iNFfISjcqN5vplR/kcAvIJd07tacn\n  y1l39NGbMLIoPVzPY6GXTNzQpxRbGn99`\n","/**\n * Decoding the base64 string to array buffer.\n * @param data the base64 string.\n * @returns the array buffer.\n */\nexport function decodeB64(data: string) {\n  const byteStr = window.atob(data)\n  const bytes = new Uint8Array(byteStr.length)\n  for (let i = 0; i < byteStr.length; i++) {\n    bytes[i] = byteStr.charCodeAt(i)\n  }\n  return bytes.buffer\n}\n\n/**\n * Imports the public PEM key.\n * @param pem the PEM key.\n * @returns a Promise that fulfills with the imported key as a CryptoKey object.\n */\nexport function importPublicKey(pem: string) {\n  return window.crypto.subtle.importKey(\n    'spki',\n    decodeB64(pem),\n    {\n      name: 'ECDSA',\n      namedCurve: 'P-384',\n    },\n    true,\n    ['verify'],\n  )\n}\n","import {assemblyDate} from './assemblyDate'\nimport {licenseSeparator, publicKeyPem, separator} from './consts'\nimport {decodeB64, importPublicKey} from './utils'\n\nasync function verifySign(data: string, signature: ArrayBuffer, publicKeyString: string) {\n  if (!window.crypto.subtle) return\n  const publicKey = await importPublicKey(publicKeyString)\n  const encoded = new TextEncoder().encode(data)\n  return await window.crypto.subtle.verify(\n    {\n      name: 'ECDSA',\n      hash: {name: 'SHA-384'}\n    },\n    publicKey,\n    signature,\n    encoded\n  )\n}\n\nfunction verifyLicenseParams(licensePrefix: string, data: string) {\n  const {licenseEndDate, restrictions, companyName} = JSON.parse(data) ?? {}\n\n  if (licensePrefix !== companyName) return false\n\n  const dateParts = licenseEndDate.split('.')\n  if (dateParts.length !== 3) return false\n\n  const isoDt = `${dateParts[2]}-${dateParts[0]}-${dateParts[1]}`\n  const licenseEndDt = new Date(isoDt)\n\n  const currentDate = new Date()\n  if (restrictions.StrictCheck === true && licenseEndDt < currentDate) return false\n\n  return licenseEndDt > assemblyDate\n}\n\n/**\n * Checks the license key\n * @param licenseKey the license key.\n * @returns true if the license is a valid, false otherwise.\n */\nexport async function verifyLicenseKey(licenseKey?: string) {\n  if (!licenseKey) return\n\n  try {\n    let separatorIndex = licenseKey.indexOf(licenseSeparator)\n    if (separatorIndex === -1) return false\n\n    const licensePrefix = licenseKey.slice(0, separatorIndex)\n    const license = licenseKey.slice(separatorIndex + licenseSeparator.length)\n\n    separatorIndex = license.indexOf(separator)\n    if (separatorIndex === -1) return false\n\n    const extractedData = window.atob(license.slice(0, separatorIndex))\n    const extractedSign = decodeB64(license.slice(separatorIndex + separator.length))\n\n    const verified = await verifySign(extractedData, extractedSign, publicKeyPem)\n    if (!verified) return false\n\n    return verifyLicenseParams(licensePrefix, extractedData)\n  } catch (e) {\n    return false\n  }\n}\n","import styled from '@emotion/styled'\nimport {useEffect} from 'react'\nimport useSafeState from '../../utils/useSafeState'\nimport {useViewerProps} from '../form-viewer/components/ViewerPropsContext'\nimport {verifyLicenseKey} from './verifySign'\n\n/**\n * TrialMessage React component.\n * @returns the React element.\n */\nexport const TrialMessage = () => {\n  const {licenseKey} = useViewerProps()\n  const [verified, setVerified] = useSafeState(true)\n\n  useEffect(() => {\n    verifyLicenseKey(licenseKey).then(value => {\n      setVerified(!!value)\n    })\n  }, [licenseKey, setVerified])\n\n  return <div>\n    {!verified && <SDiv>\n      <SLabel> </SLabel>\n    </SDiv>}\n  </div>\n}\n\nconst SDiv = styled.div`\n  display: flex;\n  position: relative;\n  background-color: #72c7ff30;\n  border-radius: 6px;\n  padding: 10px;\n  gap: 10px;\n`\n\nconst SLabel = styled.label`\n  flex: 1;\n`\n","import createCache from '@emotion/cache'\nimport rtlPlugin from 'stylis-plugin-rtl'\nimport {BiDi} from './bidi'\n\n/**\n * The CSS style cache. **Internal use only.**\n */\nexport const emotionCache = {\n  LTR: createCache({\n    key: BiDi.LTR\n  }),\n  RTL: createCache({\n    key: BiDi.RTL,\n    stylisPlugins: [rtlPlugin],\n    prepend: true\n  }),\n}\n","import {CacheProvider} from '@emotion/react'\nimport styled from '@emotion/styled'\nimport {ComponentType, ReactNode, useEffect} from 'react'\nimport {namedObserver} from '../../utils'\nimport {useStore} from '../../utils/contexts/StoreContext'\nimport type {FormViewerWrapperComponentProps} from '../define/utils/View'\nimport {BiDi} from './bidi'\nimport {emotionCache} from './emotionCache'\nimport {Language} from './types'\n\ninterface ViewerLocalizationProviderProps {\n  children: ReactNode,\n  language?: Language\n}\n\nconst viewerClassName = 'optimajet-formviewer'\n\nconst RawViewerLocalizationProvider = (props: ViewerLocalizationProviderProps) => {\n  const viewerStore = useStore()\n  const language = props.language ?? viewerStore.displayedLanguage\n\n  useEffect(() => {\n    const loaders = viewerStore.formViewerPropsStore.view.getCssLoaders(language.bidi)\n    loaders.forEach(loader => {\n      loader().catch(e => console.error(e))\n    })\n  }, [language, viewerStore.formViewerPropsStore.view])\n\n  const selectedCache = language.bidi == BiDi.RTL ? emotionCache.RTL : emotionCache.LTR\n\n  return (\n    <SDiv dir={language.bidi} lang={language.fullCode} className={viewerClassName}>\n      <CacheProvider value={selectedCache}>\n        {nestViewerWrappers(viewerStore.formViewerPropsStore.view.viewerWrappers, language, props.children)}\n      </CacheProvider>\n    </SDiv>\n  )\n}\n\nexport const ViewerLocalizationProvider = namedObserver('ViewerLocalizationProvider', RawViewerLocalizationProvider)\n\nconst SDiv = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n`\n\nconst nestViewerWrappers = ([Wrapper, ...more]: ComponentType<FormViewerWrapperComponentProps>[],\n                            language: Language, children: ReactNode) => {\n  return Wrapper\n    ? <Wrapper language={language}>{nestViewerWrappers(more, language, children)}</Wrapper>\n    : children\n}\n","import type {ReactNode} from 'react'\nimport {useEffect, useState} from 'react'\n\n/**\n * Represents the props for the SuppressResizeObserverErrors component. **Internal use only.**\n */\nexport interface SuppressResizeObserverErrorsProps {\n  /**\n   * The React child node.\n   */\n  children: ReactNode\n}\n\n/**\n * SuppressResizeObserverErrors component is used to suppress ResizeObserver errors. **Internal use only.**\n * @param props the component props.\n * @param props.children the child elements to render.\n * @returns the rendered child elements.\n */\nexport const SuppressResizeObserverErrors = ({children}: SuppressResizeObserverErrorsProps) => {\n  const [defaultOnErrorFn] = useState(window.onerror)\n\n  useEffect(() => {\n    window.onerror = (event) => {\n      if (event?.toString().search('ResizeObserver') !== -1) {\n        const resizeObserverErrDiv = document.getElementById(\n          'webpack-dev-server-client-overlay-div'\n        )\n        const resizeObserverErr = document.getElementById(\n          'webpack-dev-server-client-overlay'\n        )\n        if (resizeObserverErr) {\n          resizeObserverErr.setAttribute('style', 'display: none')\n        }\n        if (resizeObserverErrDiv) {\n          resizeObserverErrDiv.setAttribute('style', 'display: none')\n        }\n        return true\n      }\n      return false\n    }\n    return () => {\n      window.onerror = defaultOnErrorFn\n    }\n  }, [defaultOnErrorFn])\n\n  return <>{children}</>\n}\n","import {filter, Observable, Observer} from 'rxjs'\nimport {ActionEventArgs} from './ActionEventArgs'\n\n/**\n * The event stream of the form viewer.\n */\nexport class EventStream {\n\n  /**\n   * Creates the event stream of the form viewer.\n   * @param stream the set of observable events.\n   */\n  constructor(private readonly stream: Observable<ActionEventArgs>) {\n  }\n\n  /**\n   * Returns the event stream filtered by the specified predicate function.\n   * @param predicate the predicate function.\n   * @returns the event stream filtered by the specified predicate function.\n   */\n  filter(predicate: (args: ActionEventArgs) => boolean) {\n    const newStream = this.stream.pipe(filter(predicate))\n    return new EventStream(newStream)\n  }\n\n  /**\n   * Returns the event stream filtered by the specified sender keys.\n   * @param keys the sender key array.\n   * @returns the event stream filtered by the specified sender keys.\n   */\n  keys(...keys: string[]) {\n    const newStream = this.stream.pipe(filter(e => keys.includes(e.sender.key)))\n    return new EventStream(newStream)\n  }\n\n  /**\n   * Returns the event stream filtered by the specified event types.\n   * @param types the array of event types.\n   * @returns the event stream filtered by the specified event types.\n   */\n  types(...types: string[]) {\n    const newStream = this.stream.pipe(filter(e => types.includes(e.type)))\n    return new EventStream(newStream)\n  }\n\n  /**\n   * Adds the subscriber to the stream of observed events.\n   * @param next the subscriber function.\n   */\n  listen(next: (value: ActionEventArgs) => void): () => void\n\n  /**\n   * Adds the specified observer to the stream of observed events.\n   * @param observer the observer.\n   */\n  listen(observer: Partial<Observer<ActionEventArgs>>): () => void\n\n  /**\n   * Adds the specified observer to the stream of observed events.\n   * @param observerOrNext the observer.\n   * @returns the unsubscribe function.\n   */\n  listen(observerOrNext: any): () => void {\n    const subscription = this.stream.subscribe(observerOrNext)\n    return () => subscription.unsubscribe()\n  }\n}\n","import type {ComponentType} from 'react'\nimport type {ComponentTreeProps} from '../../ComponentTreeProps'\nimport {createNonNullableContext} from '../../utils/createNonNullableContext'\n\nexport const [\n  /**\n   * **Internal use only.**\n   */\n  useComponentTreeContext,\n  /**\n   * **Internal use only.**\n   */\n  ComponentTreeContextProvider] =\n  createNonNullableContext<ComponentType<ComponentTreeProps>>('ComponentTreeContext')\n","/**\n * Calculable result.\n */\nexport class CalculableResult {\n\n  /**\n   * Constructor.\n   * @param error the error.\n   * @param result the result.\n   * @param exceptions the exceptions.\n   */\n  constructor(readonly error = false, readonly result?: any, readonly exceptions?: Error[]) {\n  }\n\n  /**\n   * Creates a new instance of the CalculableResult class with a successful result.\n   * @param result the calculable result.\n   * @returns the new instance of CalculableResult class.\n   */\n  static success(result: any) {\n    return new CalculableResult(false, result)\n  }\n\n  /**\n   * Creates a new instance of CalculableResult class with an error.\n   * @param exceptions the exception array.\n   * @returns the new instance of CalculableResult class.\n   */\n  static error(exceptions: Error[]) {\n    return new CalculableResult(true, undefined, exceptions)\n  }\n}\n","import {isUndefined} from 'lodash-es'\nimport {ComponentProperty, ComponentStore, isFunctionalProperty} from '../../stores/ComponentStore'\nimport {CalculableResult} from '../../utils/CalculableResult'\nimport type {IFormData} from '../../utils/IFormData'\n\nconst fnCache = new Map<string, Function>()\n\nconst getOrCreateFn = (source: string) => {\n  const fn = fnCache.get(source)\n  if (fn) return fn\n\n  const result = new Function('form', source)\n  fnCache.set(source, result)\n  return result\n}\n\nconst calculateValue = (fnSource: string, formViewerData: IFormData) => {\n  try {\n    const fn = getOrCreateFn(fnSource)\n    const result = fn(formViewerData)\n    return CalculableResult.success(result)\n  } catch (e) {\n    return CalculableResult.error([\n      e as Error,\n      {\n        name: 'Function source',\n        message: fnSource\n      }\n    ])\n  }\n}\n\n/**\n * Calculates the value for the component property. **Internal use only.**\n * @param componentProperty the component property.\n * @param formViewerData the formViewerData data.\n * @returns the calculated value.\n * @internal\n */\nexport const calculatePropertyValue = (componentProperty: ComponentProperty, formViewerData: IFormData) => {\n  return calculateValue(componentProperty.fnSource || '', formViewerData)\n}\n\n/**\n * Calculates the value for the component property or calculates the value from the property expression.\n * @param componentProperty the component property.\n * @param formViewerData the formViewerData data.\n * @returns the calculated value.\n * @internal\n */\nexport const calculateExpressionProperty = (componentProperty: ComponentProperty, formViewerData: IFormData) => {\n  if (isFunctionalProperty(componentProperty)) return calculatePropertyValue(componentProperty, formViewerData).result\n  const fnSource = componentProperty.value || ''\n  return calculateValue(`return ${fnSource}`, formViewerData).result\n}\n\n/**\n * The result of compiling of anything. **Internal use only.**\n */\nexport interface BaseCompilationResult {\n  /**\n   * Flag if true - compilation failed, false otherwise.\n   */\n  error: boolean\n  /**\n   * The array of compilation errors.\n   */\n  exceptions?: Error[]\n}\n\n/**\n * Calculates all properties for the component.\n * @param componentStore the component.\n * @param formViewerData the formViewerData data.\n * @returns the {@link Record}<string, any> for all component properties.\n * @internal\n */\nexport const calculateProperties = (componentStore: ComponentStore, formViewerData: IFormData) => {\n  const data: Record<string, any> = {}\n  Object.keys(componentStore.props).forEach(value => {\n    const componentProperty = componentStore.props[value]\n    if (!componentProperty) return\n\n    if (isFunctionalProperty(componentProperty)) {\n      const {result, error, exceptions} = calculatePropertyValue(componentProperty, formViewerData)\n      if (error) {\n        const message = `Error in the calculable field '${value}' of the '${componentStore.key}' component `\n        console.warn(message, exceptions)\n        return\n      }\n      data[value] = result\n    }\n\n    // we do not want to set an undefined value, instead the default component property will be used\n    if (!isUndefined(componentProperty.value)) {\n      data[value] = componentProperty.value\n    }\n  })\n  return data\n}\n","import {css, cx} from '@emotion/css'\nimport {assign, keysIn} from 'lodash-es'\nimport {makeAutoObservable} from 'mobx'\nimport {calculateProperties} from '../features/calculation/propertyCalculator'\nimport {ActionEventArgs, DidMountEvent, EventName, WillUnmountEvent} from '../features/event'\nimport type {CssPart} from '../features/style/types'\nimport type {ComputeChildren} from '../utils/ComputeChildren'\nimport {ComponentData} from '../utils/contexts/ComponentDataContext'\nimport {nameObservable} from '../utils/observableNaming'\nimport {ComponentStore} from './ComponentStore'\nimport {Store} from './Store'\n\nconst getHtmlAttributes = (componentStore: ComponentStore) => componentStore.htmlAttributes\n  ?.reduce((result: Record<string, string>, {name, value}) => {\n    try {\n      result[name] = JSON.parse(value)\n    } catch {\n      result[name] = value\n    }\n    return result\n  }, {})\n\nconst computeEvents = (data: ComponentData, store: Store, state: ComponentState) => {\n  const events = {} as Record<EventName, Function>\n  const hasActions = (eventName: string) => data.store.events?.[eventName]?.length\n  const eventNames = new Set<string>(keysIn(data.store.events).filter(hasActions))\n  eventNames.add('onChange').add('onBlur')\n  eventNames.delete(DidMountEvent)\n  eventNames.delete(WillUnmountEvent)\n  eventNames.forEach((name) =>\n    events[name] = (...args: any[]) => store.eventSubject.next(new ActionEventArgs(name, data, store, args, state)))\n\n  return events\n}\n\n/**\n * Calculates all the properties of the form view component.\n */\nexport class ComponentState {\n\n  /**\n   * Creates an instance that calculates the properties of the form viewer component.\n   * @param data the data needed to display the component.\n   * @param store the form viewer settings.\n   * @param localizer the function to localize the properties of a component, returns a Record with localized properties.\n   * @param computeChildren the function that calculates all child properties of a component.\n   */\n  constructor(\n    readonly data: ComponentData,\n    readonly store: Store,\n    readonly localizer: (componentStore: ComponentStore) => Record<string, any>,\n    readonly computeChildren: ComputeChildren,\n  ) {\n    makeAutoObservable(this, undefined, {name: nameObservable('ComponentState', {key: data.key})})\n  }\n\n  /**\n   * @returns combined in order of priority component properties.\n   */\n  get get(): Record<string, any> {\n    const propsWithoutChildren = this.propsWithoutChildren\n    return Object.assign({}, propsWithoutChildren, this.className, this.children(propsWithoutChildren))\n  }\n\n  /**\n   * @returns the combined properties of the components in priority order, excluding child components.\n   */\n  get propsWithoutChildren(): Record<string, any> {\n    return Object.assign(\n      {key: this.data.store.key},\n      this.data.model.defaultProps,\n      this.calculatedProps,\n      this.localizedProps,\n      this.value,\n      this.events,\n      this.htmlAttributes,\n      this.data.userDefinedProps,\n    )\n  }\n\n  /**\n   * @returns the component's field value data, if the component can have a field value.\n   */\n  get value() {\n    if (this.data.field) return {[this.data.field.valued]: this.data.field.value}\n  }\n\n  /**\n   * @returns the values for all properties of the component, calculates the values of the calculated properties.\n   */\n  get calculatedProps() {\n    return calculateProperties(this.data.store, this.store.form.componentTree)\n  }\n\n  /**\n   * @returns component localized properties.\n   */\n  get localizedProps() {\n    return this.localizer(this.data.store)\n  }\n\n  /**\n   * @returns the component event handlers that send events to the event bus.\n   */\n  get events() {\n    return computeEvents(this.data, this.store, this)\n  }\n\n  /**\n   * Calculates and returns className property.\n   * @returns the Record that contains the className property for the component.\n   */\n  get className() {\n    const className = cx(\n      this.propsWithoutChildren.className,\n      this.getClassNameFromCssPart('css')\n    )\n    return {className}\n  }\n\n  /**\n   * Calculates and returns wrapper className property.\n   * @returns the Record that contains the className property for the wrapper of component.\n   */\n  get wrapperClassName() {\n    return this.getClassNameFromCssPart('wrapperCss')\n  }\n\n  /**\n   * @returns all arbitrary HTML attributes of the component.\n   */\n  get htmlAttributes() {\n    return getHtmlAttributes(this.data.store)\n  }\n\n  /**\n   * Calculates and returns all child components.\n   * @param props the React component properties.\n   * @returns the Record that contains the child components of a component.\n   */\n  children(props: any) {\n    return this.computeChildren(this.data, props)\n  }\n\n  private getClassNameFromCssPart(cssPart: CssPart) {\n    const {model, store} = this.data\n    const {viewMode} = this.store\n\n    const cssObjectAny = assign({},\n      model[cssPart]?.any?.object,\n      store[cssPart]?.any?.object\n    )\n    const cssObjectCurrent = assign({},\n      model[cssPart]?.[viewMode]?.object,\n      store[cssPart]?.[viewMode]?.object\n    )\n\n    return css`\n      && {\n        ${cssObjectAny}\n        ${cssObjectCurrent}\n        ${store[cssPart]?.any?.string}\n        ${store[cssPart]?.[viewMode]?.string}\n      }\n    `\n  }\n}\n","import {calculateExpressionProperty} from '../features/calculation/propertyCalculator'\nimport {ComponentStore, isFunctionalProperty} from '../stores/ComponentStore'\nimport type {IFormData} from './IFormData'\n\n/**\n * Returns true if the component should be rendered, false otherwise.\n * @param componentStore the component settings.\n * @param formData the form data.\n * @returns true if the component should be rendered, false otherwise.\n */\nexport function needRender(componentStore: ComponentStore, formData: IFormData) {\n  if (!componentStore.renderWhen) return true\n\n  if (!isFunctionalProperty(componentStore.renderWhen)) {\n    const {value} = componentStore.renderWhen\n    if (typeof value === 'string' && value.trim() === '') return true\n  }\n\n  return calculateExpressionProperty(componentStore.renderWhen, formData) === true\n}\n","import type {ComponentType} from 'react'\nimport type {ComponentTreeProps} from '../ComponentTreeProps'\nimport {ComponentStore} from '../stores/ComponentStore'\nimport {ComponentData} from './contexts/ComponentDataContext'\nimport {groupBy} from './groupBy'\nimport type {IFormData} from './IFormData'\nimport {needRender} from './needRender'\n\nconst defaultContainerKey = 'children'\n\n/**\n * Returns the {@link Record} with all child components.\n * @param data the parent component's data necessary to display the component.\n * @param formData the form data.\n * @param componentTreeItem the type of React component that wraps child components.\n * @param componentProps the properties of the parent component.\n * @returns the {@link Record} with all child components.\n */\nexport function getChildren(data: ComponentData, formData: IFormData,\n                            componentTreeItem: ComponentType<ComponentTreeProps>,\n                            componentProps: Record<string, any>) {\n  const containers = data.children\n  const ComponentTree = componentTreeItem\n  const currentProps: Record<string, any> = {}\n\n  const groups = groupBy(containers, value => value.store.slot || defaultContainerKey)\n  const isSlotConditionSatisfied = (child: ComponentData) => checkSlotCondition(child.store, componentProps)\n  const isNeedRender = (child: ComponentData) => needRender(child.store, formData)\n\n  for (const [key, children] of Object.entries(groups)) {\n    const filteredChildren = children\n      .filter(isSlotConditionSatisfied)\n      .filter(isNeedRender)\n    if (filteredChildren.length) currentProps[key] = <ComponentTree data={filteredChildren}/>\n  }\n\n  return currentProps\n}\n\nconst fnCache = new Map<string, Function>()\n\nfunction getOrCreateFn(source: string) {\n  const fn = fnCache.get(source)\n  if (fn) return fn\n\n  const result = new Function('parentProps', source)\n  fnCache.set(source, result)\n  return result\n}\n\n/**\n * Performs the function of checking if the child component can be bound. **Internal use only.**\n * @param childStore the child component settings.\n * @param parentProps the parent component properties.\n * @returns true, if the child component can be bound, false otherwise.\n */\nexport function checkSlotCondition(childStore: ComponentStore, parentProps: any) {\n  const fnSource = childStore.slotCondition?.trim()\n  // it's OK - no condition to bind\n  if (!fnSource) return true\n  const fn = getOrCreateFn(fnSource)\n  try {\n    return fn(parentProps)\n  } catch (e) {\n    console.warn(e)\n    return false\n  }\n}\n","import {useStore} from './contexts/StoreContext'\n\n/**\n * @returns the type of React component used to display the tooltip. **Internal use only.**\n */\nexport const useTooltipType = (): string | undefined => {\n  const viewerStore = useStore()\n  return viewerStore.form.tooltipType\n}\n","import {useMemo} from 'react'\nimport {Model} from '../features/define'\nimport {ComponentState} from '../stores/ComponentState'\nimport {ComponentStore} from '../stores/ComponentStore'\nimport {Store} from '../stores/Store'\nimport {useStore} from './contexts/StoreContext'\n\n/**\n * Represents a function that localizes components based on the supplied component store.\n */\nexport type ComponentLocalizer = (componentStore: ComponentStore) => Record<string, any>\n\n/**\n * Generates the component state for the wrapper component. For example, a tooltip or error message.\n * @param componentKey the key of wrapper component.\n * @param componentModel the component metadata.\n * @param wrapperProps the wrapper component props.\n * @param localizer the function used to localize the component.\n * @returns the component state for the wrapper component\n */\nexport const useWrapperState = (componentKey: string, componentModel: Model, wrapperProps: any, localizer: ComponentLocalizer) => {\n  const viewerStore = useStore()\n  return useMemo(() => getWrapperState(viewerStore, componentKey, componentModel, wrapperProps, localizer),\n    [viewerStore, componentKey, componentModel, wrapperProps, localizer])\n}\n\nconst getWrapperState = (viewerStore: Store, componentKey: string, componentModel: Model,\n                         wrapperProps: any, localizer: ComponentLocalizer) => {\n  const componentStore = new ComponentStore(componentKey, componentModel.type)\n  componentStore.props = wrapperProps\n  const componentData = viewerStore.createComponentData(componentStore, false, componentModel)\n  return new ComponentState(componentData, viewerStore, localizer, () => ({}))\n}\n","import {createElement, ReactNode, useCallback} from 'react'\nimport {namedObserver} from '../../utils'\nimport {useComponentData} from '../../utils/contexts/ComponentDataContext'\nimport {useStore} from '../../utils/contexts/StoreContext'\nimport {useTooltipType} from '../../utils/useTooltipType'\nimport {useWrapperState} from '../../utils/useWrapperState'\nimport {Model} from '../define'\nimport {useViewerProps} from '../form-viewer/components/ViewerPropsContext'\n\n/**\n * Tooltip React component wrapper properties.\n */\nexport interface TooltipWrapperProps {\n  /**\n   * The React child node.\n   */\n  children: ReactNode\n}\n\n/**\n * Tooltip React component properties.\n */\ninterface ComponentTooltipProps {\n  tooltipDefinition: Model\n  children: ReactNode\n}\n\nfunction useTooltipComponent() {\n  const formViewerProps = useViewerProps()\n  const selectedTooltipType = useTooltipType()\n  if (!selectedTooltipType) return\n  return formViewerProps.view.get(selectedTooltipType)\n}\n\n/**\n * Tooltip React component wrapper.\n * @param props the React component properties.\n * @param props.children the React child node.\n * @returns the React element.\n */\nconst RawTooltipWrapper = ({children}: TooltipWrapperProps) => {\n  const tooltipDefinition = useTooltipComponent()\n  if (!tooltipDefinition) return <>{children}</>\n  return <ComponentTooltip tooltipDefinition={tooltipDefinition}>{children}</ComponentTooltip>\n}\n\nexport const TooltipWrapper = namedObserver('TooltipWrapper', RawTooltipWrapper)\n\nconst RawComponentTooltip = ({tooltipDefinition, children}: ComponentTooltipProps) => {\n  const viewerStore = useStore()\n  const wrappedComponentData = useComponentData()\n  const wrappedComponentStore = wrappedComponentData.store\n  const localize = useCallback(componentStore => {\n    return viewerStore.localizeComponent('tooltip', componentStore)\n  }, [viewerStore])\n  const componentState = useWrapperState(wrappedComponentData.key, tooltipDefinition, wrappedComponentStore.tooltipProps, localize)\n  return createElement(tooltipDefinition.component, componentState.get, children)\n}\n\nconst ComponentTooltip = namedObserver('ComponentTooltip', RawComponentTooltip)\n","import {useMemo} from 'react'\nimport {Model} from '../features/define'\nimport {errorMessageModel, ErrorWrapperProps} from '../features/validation/components/DefaultErrorMessage'\nimport {useStore} from './contexts/StoreContext'\n\n/**\n * @returns the model of React component used to display the error.\n */\nexport const useErrorModel = (): Model<ErrorWrapperProps> => {\n  const viewerStore = useStore()\n  const errorType = viewerStore.form.errorType\n  const view = viewerStore.formViewerPropsStore.view\n\n  return useMemo(() => {\n    const model = errorType ? view.find(errorType) : errorMessageModel\n    return model ?? errorMessageModel\n  }, [errorType, view])\n}\n","import {createElement, useCallback, useEffect, useRef} from 'react'\nimport {filter} from 'rxjs'\nimport {WrapperProps} from '../../../types'\nimport {namedObserver} from '../../../utils'\nimport {useComponentData} from '../../../utils/contexts/ComponentDataContext'\nimport {useStore} from '../../../utils/contexts/StoreContext'\nimport {useErrorModel} from '../../../utils/useErrorModel'\nimport {ComponentLocalizer, useWrapperState} from '../../../utils/useWrapperState'\nimport {ActionEventHandler} from '../../event'\nimport {useViewerProps} from '../../form-viewer/components/ViewerPropsContext'\n\nconst useEventListener = (sender: string, type: string, listener: ActionEventHandler) => {\n  const {eventSubject} = useStore()\n  const listenerRef = useRef(listener)\n\n  listenerRef.current = listener\n\n  useEffect(() => {\n    const subscription = eventSubject\n      .pipe(filter(e => e.type === type && e.sender.key === sender))\n      .subscribe(e => {\n        listenerRef.current(e)\n      })\n    return () => subscription.unsubscribe()\n  }, [eventSubject, sender, type])\n}\n\nconst RawErroneous = ({children}: WrapperProps) => {\n  const wrappedComponentData = useComponentData()\n  const viewerStore = useStore()\n  const props = useViewerProps()\n  const errorDefinition = useErrorModel()\n\n  const localizer = useCallback<ComponentLocalizer>(() => ({}), [])\n  const componentState = useWrapperState(wrappedComponentData.key, errorDefinition, viewerStore.form.errorProps, localizer)\n\n  useEventListener(wrappedComponentData.key, 'onChange', e => wrappedComponentData.field?.setValue(e.value))\n  useEventListener(wrappedComponentData.key, 'onBlur', _ => wrappedComponentData.field?.setTouched())\n\n  if (props.erroneous) return <>{children}</>\n\n  const errorProps = {...componentState.get, error: wrappedComponentData.field?.error}\n  return createElement(errorDefinition.component, errorProps, children)\n}\n\nexport const Erroneous = namedObserver('Erroneous', RawErroneous)\n","import {debounceTime, map, Subject, switchMap} from 'rxjs'\nimport type {IStore} from '../../../stores/IStore'\nimport type {Setter} from '../../../types'\nimport type {ValidationResult} from '../types/ValidationResult'\n\n/**\n * A function that localizes validation error messages.\n * @param value the results of the validation.\n * @returns the localization result or undefined.\n */\nexport type ErrorMessageLocalizer = (value: ValidationResult[] | undefined) => string | undefined\n\n/**\n * The function that validates a value and returns the validation result.\n * @param value the validated value.\n * @param store the form viewer settings.\n * @returns the Promise with the results of the validation.\n */\nexport type ResolvedValidator = (value: any, store: IStore) => Promise<ValidationResult[] | undefined>\n\n/**\n * The validation function factory.\n * @param value the validated value.\n * @template T the validation function factory arguments.\n * @returns the function that validates a value.\n */\nexport type SchemaResolver<T> = (value: T) => ResolvedValidator\n\n/**\n * Returns the default error message for the validation result.\n * @param result the validation result.\n * @returns the default error message for the validation result.\n */\nexport function getDefaultErrorMessage(result: ValidationResult) {\n  return result.message ?? `Validation failed: ${result.settings.key}`\n}\n\nfunction concatErrorMessages(value: ValidationResult[] | undefined) {\n  if (!value) return undefined\n  return value?.map(getDefaultErrorMessage).join(' ')\n}\n\n/**\n * Binds all parts of the validation and performs the validation.\n */\nexport class DataValidator {\n  readonly #subject = new Subject<any>()\n  readonly #subscriptions\n  readonly #stream\n  readonly #validator\n\n  private constructor(\n    store: IStore,\n    validator: ResolvedValidator,\n    setter: Setter<string | undefined>,\n    errorMessageLocalizer?: ErrorMessageLocalizer\n  ) {\n    const localizer = errorMessageLocalizer ?? concatErrorMessages\n    this.#validator = (value: any) => validator(value, store)\n    this.#stream = this.#subject\n      .pipe(\n        debounceTime(200),\n        map(this.#validator),\n        switchMap(promise => promise),\n        map(localizer),\n      )\n    this.#subscriptions = [\n      this.#stream.subscribe(setter),\n    ]\n  }\n\n  /**\n   * Creates a DataValidator instance.\n   * @param store the form viewer settings\n   * @param resolver the validation function factory.\n   * @param args the validation function factory arguments.\n   * @param setter the callback function called to set a validation error.\n   * @param localizer the function that localizes validation error messages.\n   * @template T the validation function factory arguments.\n   * @returns the DataValidator instance.\n   */\n  static create = <T>(store: IStore, resolver: SchemaResolver<T>, args: T,\n                      setter: Setter<string | undefined>, localizer?: ErrorMessageLocalizer) => {\n    return new DataValidator(store, resolver(args), setter, localizer)\n  }\n\n  /**\n   * Generates an event to perform validation.\n   * @param value the validated value.\n   */\n  sendValidationEvent = (value: any) => {\n    this.#subject.next(value)\n  }\n\n  /**\n   * Performs a validation of the value.\n   * @param value the validated value.\n   * @returns the Promise with the result of the validation.\n   */\n  validate = (value: any) => {\n    const promise = new Promise<string | undefined>(resolve => {\n      const subscribe = this.#stream.subscribe(next => {\n        resolve(next)\n        subscribe.unsubscribe()\n      })\n    })\n    this.sendValidationEvent(value)\n    return promise\n  }\n\n  /**\n   * Returns the validation results without triggering an events and changing the state of the form.\n   * @param value the validated value.\n   * @returns the validation results.\n   */\n  getValidationResult = (value: any) => {\n    return this.#validator(value)\n  }\n\n  /**\n   * Releases allocated resources, must be used when destroying an object instance.\n   */\n  dispose = () => {\n    this.#subscriptions.forEach(s => s.unsubscribe())\n  }\n}\n","import styled from '@emotion/styled'\n\n/**\n * The React component that wraps every component in a form.\n */\nexport const DefaultWrapper = styled.div`\n  display: flex;\n`\n","import {cx} from '@emotion/css'\nimport {forIn} from 'lodash-es'\nimport {Fragment, useCallback, useEffect, useMemo, useRef} from 'react'\nimport {catchError, concatMap, filter, OperatorFunction, Subscription} from 'rxjs'\nimport {ComponentState} from '../../stores/ComponentState'\nimport {isPromise, namedObserver} from '../../utils'\nimport {ComponentData, useComponentData} from '../../utils/contexts/ComponentDataContext'\nimport {useStore} from '../../utils/contexts/StoreContext'\nimport {getChildren} from '../../utils/getChildren'\nimport {ActionData, ActionEventArgs, Arguments, DidMountEvent, Func, WillUnmountEvent} from '../event'\nimport {useViewerProps} from '../form-viewer/components/ViewerPropsContext'\nimport {TooltipWrapper} from '../tooltip/TooltipWrapper'\nimport {Erroneous} from '../validation'\nimport {useComponentTreeContext} from './ComponentTreeContext'\nimport {DefaultWrapper} from './DefaultWrapper'\n\ntype Fn = () => void\n\nfunction useComponentMountUnmount(init: Fn, clear: Fn) {\n  const clearRef = useRef(clear)\n  const initRef = useRef(init)\n\n  clearRef.current = clear\n  initRef.current = init\n\n  useEffect(() => {\n    initRef.current()\n\n    return () => {\n      clearRef.current()\n    }\n  }, [])\n}\n\nconst useActions = (state: ComponentState) => {\n  const store = useStore()\n  const componentData = useComponentData()\n  const subsRef = useRef<Subscription[]>([])\n\n  const unsubscribe = useCallback(() => {\n    subsRef.current.forEach((s) => s.unsubscribe())\n  }, [])\n\n  const createSubscriptions = useCallback(() => {\n    const result: Subscription[] = []\n\n    unsubscribe()\n\n    forIn(componentData.store.events, (actionDataList: ActionData[], eventName) => {\n      const actionChain: OperatorFunction<ActionEventArgs, ActionEventArgs>[] = []\n\n      actionDataList.forEach((data) => {\n        const actionDefinition = store.findAction(data)\n        const action = getActionHandler(actionDefinition.func, data.args)\n        actionChain.push(concatMap(action))\n      })\n\n      const subscription = store.eventSubject\n        .pipe(\n          filter(e => e.type === eventName && e.sender.key === componentData.store.key),\n          // @ts-ignore this method don't like spread\n          ...actionChain,\n          catchError((err, caught) => {\n            console.error(err)\n            return caught\n          }),\n        )\n        .subscribe()\n\n      result.push(subscription)\n    })\n\n    subsRef.current = result\n  }, [componentData.store.events, componentData.store.key, store, unsubscribe])\n\n  useEffect(() => {\n    createSubscriptions()\n  }, [createSubscriptions, unsubscribe])\n\n  useComponentMountUnmount(() => {\n    createSubscriptions()\n\n    const mountEvent = new ActionEventArgs(DidMountEvent, componentData, store, [], state)\n\n    store.eventSubject.next(mountEvent)\n  }, () => {\n    const unmountEvent = new ActionEventArgs(WillUnmountEvent, componentData, store, [], state)\n\n    store.eventSubject.next(unmountEvent)\n\n    unsubscribe()\n  })\n}\n\nfunction getActionHandler(func: Func, args?: Arguments) {\n  return async (e: ActionEventArgs) => {\n    const actionArgs = args ? {...args} : {}\n    const result = func(e, actionArgs)\n    if (isPromise(result)) await result\n    return e\n  }\n}\n\nconst RawComponentViewer = () => {\n  const data = useComponentData()\n  const {componentWrapper, computeChildren: viewerComputeChildren} = useViewerProps()\n  const formViewerStore = useStore()\n  const localize = useCallback(componentStore => {\n    return formViewerStore.localizeComponent('component', componentStore)\n  }, [formViewerStore])\n  const componentTree = useComponentTreeContext()\n\n  const computeChildren = useCallback((componentData: ComponentData, componentProps: Record<string, any>) => {\n    if (viewerComputeChildren) return viewerComputeChildren(componentData, componentProps)\n    return getChildren(componentData, formViewerStore.form.componentTree, componentTree, componentProps)\n  }, [viewerComputeChildren, formViewerStore.form.componentTree, componentTree])\n\n  const componentState = useMemo(\n    () => new ComponentState(data, formViewerStore, localize, computeChildren),\n    [data, formViewerStore, localize, computeChildren])\n\n  useActions(componentState)\n\n  const props = componentState.get\n  const {kind, component: Component} = data.model\n  const containerClassName = cx(props.className, componentState.wrapperClassName)\n\n  const Wrapper = componentWrapper ?? DefaultWrapper\n  const Tooltip = data.store.tooltipProps ? TooltipWrapper : Fragment\n  const ContainerComponent = componentWrapper ?? Component\n  const component = <Component {...props}/>\n\n  if (kind === 'container') {\n    return <ContainerComponent {...props} className={containerClassName}/>\n  }\n\n  return <Wrapper className={kind === 'template' ? containerClassName : componentState.wrapperClassName}>\n    {kind === 'template'\n      ? component\n      : <Tooltip><Erroneous>{component}</Erroneous></Tooltip>\n    }\n  </Wrapper>\n}\n\nexport const ComponentViewer = namedObserver('ComponentViewer', RawComponentViewer)\n","import {namedObserver} from '../../utils'\nimport {ComponentData, ComponentDataProvider} from '../../utils/contexts/ComponentDataContext'\nimport {ComponentViewer} from './ComponentViewer'\n\n/**\n * Properties of the React component {@link ComponentTreeItem}.\n */\nexport interface ComponentTreeItemProps {\n  /**\n   * The data required to display the component.\n   */\n  componentData: ComponentData\n}\n\n/**\n * The React form viewer component that displays an item from the component tree.\n * @param props the React component properties.\n * @param props.componentData the data required to display the component.\n * @returns the React element.\n */\nconst RawComponentTreeItem = ({componentData}: ComponentTreeItemProps) => (\n  <ComponentDataProvider value={componentData}>\n    <ComponentViewer/>\n  </ComponentDataProvider>\n)\n\nexport const ComponentTreeItem = namedObserver('ComponentTreeItem', RawComponentTreeItem)\n","import type {ComponentTreeProps} from '../../ComponentTreeProps'\nimport {namedObserver} from '../../utils'\nimport {ComponentTreeContextProvider} from './ComponentTreeContext'\nimport {ComponentTreeItem} from './ComponentTreeItem'\n\n/**\n * The React component that displays an array of ComponentData. **Internal use only.**\n * @param props the React component properties.\n * @param props.data the array of child elements of the tree.\n * @returns the React element.\n */\nconst RawComponentTree = ({data}: ComponentTreeProps) => {\n  return <ComponentTreeContextProvider value={ComponentTree}>\n    {data.map(cd => <ComponentTreeItem key={cd.id} componentData={cd}/>)}\n  </ComponentTreeContextProvider>\n}\n\nexport const ComponentTree = namedObserver('ComponentTree', RawComponentTree)\n","import {useEffect, useMemo} from 'react'\nimport {ViewMode} from '../../../types'\nimport {namedObserver} from '../../../utils'\nimport {useStore} from '../../../utils/contexts/StoreContext'\nimport {EventStream} from '../../event/utils/EventStream'\nimport {ComponentTree} from '../../ui/ComponentTree'\nimport {useViewerProps} from './ViewerPropsContext'\n\nconst getViewMode = (): ViewMode => {\n  const width = window.innerWidth\n\n  if (width <= 600) return 'mobile'\n  if (width <= 900) return 'tablet'\n\n  return 'desktop'\n}\n\nfunction useAutoViewMode() {\n  const store = useStore()\n  const props = useViewerProps()\n\n  useEffect(() => {\n    if (props.viewMode) {\n      store.viewMode = props.viewMode\n      return\n    }\n\n    const onResize = () => store.viewMode = getViewMode()\n    window.addEventListener('resize', onResize)\n    return () => window.removeEventListener('resize', onResize)\n  }, [props.viewMode, store])\n}\n\n/**\n * Properties of the React component {@link Viewer}.\n */\nexport interface ViewerProps {\n  /**\n   * The function for processing form events.\n   * @param stream the event stream of the form viewer.\n   */\n  event?: (stream: EventStream) => void\n}\n\n/**\n * The React component of the form viewer, which displays the form itself with its components.\n * @param props the React component properties.\n * @param props.event the function for processing form events.\n * @returns the React element.\n */\nconst RawViewer = ({event}: ViewerProps) => {\n  const store = useStore()\n  const props = useViewerProps()\n  const data = useMemo(() => [store.form.componentTree], [store.form.componentTree])\n\n  useEffect(() => {\n    event?.(new EventStream(store.eventSubject))\n  }, [event, store.eventSubject])\n\n  useAutoViewMode()\n\n  useEffect(() => store.loadForm(props.getForm, props.formName), [store, props.getForm, props.formName])\n\n  return <ComponentTree data={data}/>\n}\n\nexport const Viewer = namedObserver('Viewer', RawViewer)\n","import {ActionDefinition, ActionEventHandler, ActionValues} from '../event'\n\n/**\n * Custom actions for the form viewer.\n */\nexport type CustomActions = Record<string, ActionDefinition | ActionEventHandler>\n\n/**\n * Converts custom actions to the set of action definitions. **Internal use only.**\n * @param actions the custom actions.\n * @returns the set of action definitions or undefined.\n */\nexport function customActionsToActionsValues(actions?: CustomActions): ActionValues | undefined {\n  if (!actions) return\n\n  const result: ActionValues = {}\n  Object.entries(actions).forEach(([name, value]) => {\n    result[name] = value instanceof ActionDefinition\n      ? value\n      : ActionDefinition.functionalAction(value)\n  })\n  return result\n}\n","import {makeObservable, observable} from 'mobx'\nimport {View} from '../features/define'\nimport type {ActionValues} from '../features/event'\nimport type {FormViewerProps} from '../features/form-viewer'\nimport type {ComponentLocalizer} from '../features/form-viewer/ComponentLocalizer'\nimport {customActionsToActionsValues} from '../features/form-viewer/CustomActions'\nimport type {FormValidators} from '../features/form-viewer/FormValidators'\nimport {Language} from '../features/localization/types'\nimport type {Validators} from '../features/validation/types/CustomValidationRules'\nimport {nameObservable} from '../utils/observableNaming'\n\n/**\n * Represents the props passed to the FormViewer Store. **Internal use only.**\n */\nexport class FormViewerPropsStore {\n  /**\n   * The metadata of the form viewer components.\n   */\n  view: View = new View()\n  /**\n   * The initial form data.\n   */\n  initialData: Record<string, unknown> = {}\n  /**\n   * The set of metadata of validation rules, grouped by the type of value being validated.\n   */\n  validators?: Validators\n  /**\n   * The set of functions that validate the form data.\n   */\n  formValidators?: FormValidators\n  /**\n   * The function to localize the properties of a component.\n   */\n  localizer?: ComponentLocalizer\n  /**\n   * Custom actions for the form viewer.\n   */\n  actions?: ActionValues\n  /**\n   * The full language code passed in the FormViewer properties.\n   */\n  propsLanguage?: Language\n\n  /**\n   * Constructs a new FormViewerPropsStore from the given FormViewerProps.\n   * @param formViewerProps the FormViewer props.\n   * @returns the FormViewerPropsStore.\n   */\n  constructor(formViewerProps?: FormViewerProps) {\n    if (formViewerProps) {\n      this.applyProps(formViewerProps)\n    }\n\n    makeObservable(this, {\n      view: observable.ref,\n      initialData: observable.ref,\n      validators: observable.ref,\n      formValidators: observable.ref,\n      localizer: observable.ref,\n      actions: observable.ref,\n      propsLanguage: observable.ref\n    }, {name: nameObservable(`FormViewerPropsStore`)})\n  }\n\n  /**\n   * Applies the given FormViewerProps.\n   * @param formViewerProps the properties to apply.\n   */\n  applyProps(formViewerProps: FormViewerProps) {\n    this.view = formViewerProps.view\n    this.initialData = formViewerProps.initialData ?? {}\n    this.validators = formViewerProps.validators\n    this.formValidators = formViewerProps.formValidators\n    this.localizer = formViewerProps.localize\n    this.actions = customActionsToActionsValues(formViewerProps.actions)\n    this.propsLanguage = formViewerProps.language\n  }\n\n  /**\n   * Returns the clone of the FormViewerPropsStore object.\n   * @returns the clone of the FormViewerPropsStore object.\n   */\n  clone(): FormViewerPropsStore {\n    const clone = new FormViewerPropsStore()\n    clone.view = this.view\n    clone.initialData = this.initialData\n    clone.validators = this.validators\n    clone.formValidators = this.formValidators\n    clone.localizer = this.localizer\n    clone.actions = this.actions\n    clone.propsLanguage = this.propsLanguage\n    return clone\n  }\n}\n","import {ActionDefinition, ActionValues} from '../types'\n\nexport const commonActions: ActionValues = {\n  // eslint-disable-next-line no-console\n  log: ActionDefinition.functionalAction(console.log),\n  validate: ActionDefinition.functionalAction(async e => await e.store.form.componentTree.validate()),\n  clear: ActionDefinition.functionalAction(e => e.store.form.componentTree.clear()),\n  reset: ActionDefinition.functionalAction(e => e.store.form.componentTree.reset())\n}\n","/**\n * Represents the type of property block.\n */\nexport type PropertyBlockType = 'component' | 'tooltip' | string\n\nconst validatorBlockPrefix = 'validator-'\n\n/**\n * Retrieves the property block type for a given rule key. **Internal use only.**\n * @param ruleKey the rule key.\n * @returns the property block type. Validator property block types are prefixed with 'validator-'.\n */\nexport const getValidatorPropertyBlockType = (ruleKey: string): PropertyBlockType => {\n  return `${validatorBlockPrefix}${ruleKey}`\n}\n\n/**\n * Determines if the given type is a validator property block type. **Internal use only.**\n * @param type the type to be checked.\n * @returns the boolean value indicating if the type is a validator property block type.\n */\nexport const isValidatorPropertyBlockType = (type: PropertyBlockType): boolean => {\n  return type.startsWith(validatorBlockPrefix)\n}\n","import {FluentBundle, FluentResource} from '@fluent/bundle'\nimport type {FluentVariable} from '@fluent/bundle/esm/bundle'\nimport {ComponentStore, isLocalizedProperty} from '../../stores/ComponentStore'\nimport {Form} from '../../stores/Form'\nimport type {LocalizationType} from '../../stores/LocalizationStore'\nimport {CalculableResult} from '../../utils/CalculableResult'\nimport {getValidatorPropertyBlockType} from '../ui/PropertyBlockType'\nimport {getFluentCompatibleId} from './getFluentCompatibleId'\nimport {Language} from './types'\n\n/**\n * Localization testing request.\n */\nexport type LocalizationTestRequest = {\n  /**\n   * Localization value to be tested.\n   */\n  localization: string,\n  /**\n   * The identifier of the localization string.\n   */\n  localizationStringId: string,\n  /**\n   * The localization Language.\n   */\n  language: Language,\n  /**\n   * The test form data.\n   */\n  data: Record<string, FluentVariable>\n}\n\n/**\n * Localization testing function. **Internal use only.**\n * @param request the localization testing request.\n * @returns the localization testing result.\n */\nexport const testFluentLocalization = (request: LocalizationTestRequest): CalculableResult => {\n  const localizationSting = `${request.localizationStringId} = ${request.localization}`\n  const resource = new FluentResource(localizationSting)\n  const bundle = new FluentBundle(`${request.language.fullCode}`)\n  const errors = bundle.addResource(resource)\n  if (errors.length > 0) {\n    return CalculableResult.error([...errors])\n  }\n\n  const message = bundle.getMessage(request.localizationStringId)\n\n  if (typeof message === 'undefined') {\n    return CalculableResult.error([{message: 'Localization message not found', name: 'MessageNotFound'}])\n  }\n\n  if (message.value === null) {\n    return CalculableResult.error([{message: 'Localization message is null', name: 'MessageIsNull'}])\n  }\n\n  let result = ''\n\n  try {\n    result = bundle.formatPattern(message.value, request.data)\n  } catch (e) {\n    if (e instanceof Error) {\n      return CalculableResult.error([e])\n    }\n\n    throw e\n  }\n\n  return CalculableResult.success(result)\n}\n\n/**\n * Localizes all props of the specified component.\n * @param form the form.\n * @param language the displayed language.\n * @param componentStore the full state of a localizable component.\n * @param type the localization type.\n * @returns the object containing only the localized props of the specified component.\n */\nexport const localizeProperties = (form: Form, language: Language, componentStore: ComponentStore, type: LocalizationType = 'component') => {\n  const componentTree = form.componentTree\n  const {defaultBundle, fluentBundle} = getFluentBundles(form, language)\n  const data: Record<string, any> = {}\n\n  Object.keys(componentStore.props).forEach(value => {\n    const componentProperty = componentStore.props[value]\n    if (!isLocalizedProperty(componentProperty)) return\n\n    const messageId = getFluentCompatibleId(`${componentStore.key}_${type}_${value}`)\n    const message = fluentBundle.getMessage(messageId) ?? defaultBundle?.getMessage(messageId)\n    if (!message) {\n      data[value] = '[NOT LOCALIZED]'\n      return\n    }\n    try {\n      data[value] = fluentBundle.formatPattern(message.value!, componentTree.fluentData)\n    } catch (e) {\n      console.error(e)\n    }\n  })\n\n  return data\n}\n\n/**\n * Localizes validator error message.\n * @param form the form.\n * @param language the displayed language.\n * @param componentStore the full state of a localizable component.\n * @param ruleKey the validator rule key.\n * @returns the object containing only the localized props of the specified component.\n */\nexport const localizeErrorMessage = (form: Form, language: Language, componentStore: ComponentStore, ruleKey: string) => {\n  const type = getValidatorPropertyBlockType(ruleKey)\n  const value = 'message'\n  const messageId = getFluentCompatibleId(`${componentStore.key}_${type}_${value}`)\n  const {defaultBundle, fluentBundle} = getFluentBundles(form, language)\n  const message = fluentBundle.getMessage(messageId) ?? defaultBundle?.getMessage(messageId)\n  if (!message) {\n    return\n  }\n  try {\n    return fluentBundle.formatPattern(message.value!, form.componentTree.fluentData)\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nconst getFluentBundles = (form: Form, language: Language) => {\n  const defaultBundle = form.defaultLanguage !== language\n    ? form.localization.getFluentBundle(form.defaultLanguage.fullCode)\n    : undefined\n  const fluentBundle = form.localization.getFluentBundle(language.fullCode)\n  return {defaultBundle, fluentBundle}\n}\n","import {BiDi} from './bidi'\n\n/**\n * The language to localize the form builder.\n */\nexport class Language {\n\n  /**\n   * Creates a localization language for the form builder.\n   * @param code the language code, for example, 'en'.\n   * @param dialect the dialect code, for example, 'US'.\n   * @param name the name of the language, for example 'English'.\n   * @param description the description of the language, for example 'American English'.\n   * @param bidi the type of text layout, for example, BiDi.LTR.\n   */\n  constructor(\n    readonly code: string,\n    readonly dialect: string,\n    readonly name: string,\n    readonly description: string,\n    readonly bidi: BiDi = BiDi.LTR,\n  ) {\n  }\n\n  /**\n   * @returns Full code of the Language i.e en-US, en-GB etc.\n   */\n  get fullCode() {\n    return `${this.code}-${this.dialect}`\n  }\n\n  /**\n   * Clones an existing instance of the language.\n   * @param source the cloning object.\n   * @returns the object clone.\n   */\n  static clone(source: Language) {\n    return new Language(source.code, source.dialect, source.name, source.description, source.bidi)\n  }\n}\n","import {commonStyles, containerStyles, getDefaultCss} from '../annotation'\nimport {toStyleProperties} from '../annotation/toStyleProperties'\nimport {Model} from '../define'\nimport {DefaultWrapper} from './DefaultWrapper'\n\nconst Screen = DefaultWrapper\nScreen.displayName = 'Screen'\n\nconst {height} = commonStyles\nconst {flexDirection, gap} = containerStyles\nexport const screenStyleProperties = toStyleProperties({\n  ...containerStyles,\n  ...commonStyles,\n  height: height.setup({default: '100%'}),\n  flexDirection: flexDirection.default('column'),\n  gap: gap.default('10px')\n})\n\nconst defaultCss = getDefaultCss(screenStyleProperties)\n\n/**\n * Form viewer screen metadata. **Internal use only.**\n */\nexport const screenModel = new Model(Screen, undefined, undefined,\n  undefined, undefined, undefined, defaultCss, undefined, undefined, undefined,\n  'container')\n","import styled from '@emotion/styled'\nimport {ComponentStore} from '../../stores/ComponentStore'\nimport {Model} from '../define'\nimport {screenModel} from './screenModel'\n\n/**\n * React component properties that display an internal form view error. **Internal use only.**\n */\nexport interface InternalErrorProps {\n  /**\n   * The internal error.\n   */\n  error: any\n}\n\nconst SH1 = styled.h1`\n  color: red;\n`\n\nconst InternalError = ({error}: InternalErrorProps) => {\n  return <SH1>{error?.message ?? JSON.stringify(error)}</SH1>\n}\nInternalError.displayName = 'InternalError'\n\n/**\n * Form viewer internal error metadata. **Internal use only.**\n * @internal\n */\nexport const internalErrorModel = new Model(InternalError)\n\n/**\n * Creates the component setting for the internal form viewer error.\n * @param error the internal error.\n * @returns the component setting for the internal form viewer error.\n */\nexport function buildInternalErrorStore(error: any) {\n  const componentStore = new ComponentStore(internalErrorModel.name, internalErrorModel.type)\n  componentStore.props['error'] = {value: error}\n  const screen = new ComponentStore(screenModel.name, screenModel.type)\n  screen.children = [componentStore]\n  return screen\n}\n\n/**\n * Creates component metadata for the form viewer representing an internal error.\n * @param error the internal error.\n * @returns the component metadata for the form viewer representing an internal error.\n */\nexport function buildInternalErrorModel(error: any) {\n  const defaultProps = {error: error}\n  return new Model(InternalError, undefined, undefined, undefined, undefined, defaultProps)\n}\n","const templateTypeNamePrefix = 'Template:'\n\n/**\n * Generates the template type name from the specified template name. **Internal use only.**\n * @param name the template name.\n * @returns the template type name.\n */\nexport function generateTemplateTypeName(name: string) {\n  return templateTypeNamePrefix + name\n}\n\n/**\n * Extracts the template name from the specified component type name.\n * @param typeName the component type name.\n * @returns the template name.\n */\nexport function getTemplateName(typeName: string) {\n  if (typeName.startsWith(templateTypeNamePrefix)) return typeName.slice(templateTypeNamePrefix.length)\n  throw new Error(`Cannot determine template name from '${typeName}'`)\n}\n\n/**\n * Returns true if typeName is the template type, false otherwise.\n * @param typeName the type name.\n * @returns true if typeName is the template type, false otherwise.\n */\nexport function isTemplateType(typeName: string) {\n  return typeName.startsWith(templateTypeNamePrefix)\n}\n","import type {PropertyKey} from '../../event'\nimport type {SchemaType} from '../types/SchemaType'\nimport type {SchemaTypeMap} from '../types/SchemaTypeMap'\nimport type {ValidationRule} from '../types/ValidationRule'\nimport type {ValidationRuleParameter} from '../types/ValidationRuleParameter'\nimport type {ValidatorFactory} from '../types/ValidatorFactory'\n\n/**\n * The key-value pair for a value type.\n */\nexport type Pair<Key, Type extends SchemaType> = { [k in keyof Key]: SchemaTypeMap[Type] }\n\n/**\n * The type-safe rule builder.\n */\nexport type ValidationRuleBuilder<Params> = {\n  /**\n   * The validation rule parameters.\n   */\n  params: ValidationRuleParameter[],\n  /**\n   * Adds a parameter to the validation rule.\n   */\n  withParameter: <T extends SchemaType = 'string', Key = any>(key: PropertyKey<Key>,\n                                                              type?: T,\n                                                              required?: boolean,\n                                                              defaultValue?: SchemaTypeMap[T],\n                                                              editorType?: string) => ValidationRuleBuilder<Params & Pair<Key, T>>\n  /**\n   * Sets the validation rule factory.\n   */\n  withValidatorFactory: (apply: ValidatorFactory<Params>) => ValidationRule\n}\n\n/**\n * @returns the {@link ValidationRuleBuilder} with the 'message' parameter.\n */\nexport function ruleBuilder() {\n  const builder = {\n    params: [],\n    withParameter(key, type?, required = false,\n                  defaultValue?, editorType?): ValidationRuleBuilder<any> {\n      this.params.push({key, type: type ?? 'string', required, default: defaultValue, editorType})\n      return this\n    },\n    withValidatorFactory(validatorFactory) {\n      return {...this, validatorFactory}\n    }\n  } as ValidationRuleBuilder<{}>\n  return builder.withParameter('message')\n}\n","import type {ZodTypeAny} from 'zod'\nimport type {RuleValidator} from '../types/RuleValidator'\n\n/**\n * Converts {@link ZodTypeAny} to {@link RuleValidator}.\n * @param zodValidator the {@link ZodTypeAny} instance.\n * @returns the {@link RuleValidator} instance.\n */\nexport function zodAnyToValidator(zodValidator: ZodTypeAny): RuleValidator {\n  return async value => {\n    const result = await zodValidator?.safeParseAsync(value)\n    if (result?.success) return true\n    return result?.error.issues?.[0].message ?? false\n  }\n}\n","import {z} from 'zod'\nimport type {ValidationRuleSet} from '../types/ValidationRuleSet'\nimport {ruleBuilder} from '../utils/ruleBuilder'\nimport {zodAnyToValidator} from './zodAnyToValidator'\n\nconst scheme = z.array(z.any())\n\nexport const ZodArrayRules: ValidationRuleSet = {\n  nonEmpty: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.nonempty(message))),\n\n  length: ruleBuilder()\n    .withParameter('length', 'number', true)\n    .withValidatorFactory(({length, message}) => zodAnyToValidator(scheme.length(length, message))),\n\n  min: ruleBuilder()\n    .withParameter('limit', 'number', true)\n    .withValidatorFactory(({limit, message}) => zodAnyToValidator(scheme.min(limit, message))),\n\n  max: ruleBuilder()\n    .withParameter('limit', 'number', true)\n    .withValidatorFactory(({limit, message}) => zodAnyToValidator(scheme.max(limit, message))),\n\n}\n","import {z} from 'zod'\nimport type {ValidationRuleSet} from '../types/ValidationRuleSet'\nimport {ruleBuilder} from '../utils/ruleBuilder'\nimport {zodAnyToValidator} from './zodAnyToValidator'\n\nconst scheme = z.boolean()\n\nexport const ZodBooleanRules: ValidationRuleSet = {\n  truthy: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.refine(arg => arg, message))),\n\n  falsy: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.refine(arg => !arg, message))),\n}\n","import {z} from 'zod'\nimport type {ValidationRuleSet} from '../types/ValidationRuleSet'\nimport {ruleBuilder} from '../utils/ruleBuilder'\nimport {zodAnyToValidator} from './zodAnyToValidator'\n\nconst scheme = z.date()\n\nexport const ZodDateRules: ValidationRuleSet = {\n\n  min: ruleBuilder()\n    .withParameter('value', 'date', true)\n    .withValidatorFactory(({value, message}) => zodAnyToValidator(scheme.min(new Date(value), message))),\n\n  max: ruleBuilder()\n    .withParameter('value', 'date', true)\n    .withValidatorFactory(({value, message}) => zodAnyToValidator(scheme.max(new Date(value), message))),\n}\n","import {z} from 'zod'\nimport type {ValidationRuleSet} from '../types/ValidationRuleSet'\nimport {ruleBuilder} from '../utils/ruleBuilder'\nimport {zodAnyToValidator} from './zodAnyToValidator'\n\nconst scheme = z.number()\n\nexport const ZodNumberRules: ValidationRuleSet = {\n  min: ruleBuilder()\n    .withParameter('limit', 'number', true)\n    .withValidatorFactory(({limit, message}) => zodAnyToValidator(scheme.min(limit, message))),\n\n  max: ruleBuilder()\n    .withParameter('limit', 'number', true)\n    .withValidatorFactory(({limit, message}) => zodAnyToValidator(scheme.max(limit, message))),\n\n  lessThan: ruleBuilder()\n    .withParameter('value', 'number', true)\n    .withValidatorFactory(({value, message}) => zodAnyToValidator(scheme.lt(value, message))),\n\n  moreThan: ruleBuilder()\n    .withParameter('value', 'number', true)\n    .withValidatorFactory(({message, value}) => zodAnyToValidator(scheme.gt(value, message))),\n\n  integer: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.int(message))),\n\n  multipleOf: ruleBuilder()\n    .withParameter('value', 'number', true)\n    .withValidatorFactory(({message, value}) => zodAnyToValidator(scheme.multipleOf(value, message))),\n\n  finite: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.finite(message))),\n}\n","import type {ValidationRuleSet} from '../types/ValidationRuleSet'\n\nexport const ZodObjectRules: ValidationRuleSet = {}\n","import {z} from 'zod'\nimport {AsyncFunction} from '../../../utils/AsyncFunction'\nimport type {ValidationRuleSet} from '../types/ValidationRuleSet'\nimport {ruleBuilder} from '../utils/ruleBuilder'\nimport {zodAnyToValidator} from './zodAnyToValidator'\n\nconst scheme = z.string()\n\nexport const ZodStringRules: ValidationRuleSet = {\n  required: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(z.string({required_error: message}).nonempty(message))),\n\n  nonEmpty: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.nonempty(message))),\n\n  length: ruleBuilder()\n    .withParameter('length', 'number', true)\n    .withValidatorFactory(({length, message}) => zodAnyToValidator(scheme.length(length, message))),\n\n  min: ruleBuilder()\n    .withParameter('limit', 'number', true)\n    .withValidatorFactory(({limit, message}) => zodAnyToValidator(scheme.min(limit, message))),\n\n  max: ruleBuilder()\n    .withParameter('limit', 'number', true)\n    .withValidatorFactory(({limit, message}) => zodAnyToValidator(scheme.max(limit, message))),\n\n  regex: ruleBuilder()\n    .withParameter('regex', 'string', true)\n    .withValidatorFactory(({message, regex}) => zodAnyToValidator(scheme.regex(new RegExp(regex), message))),\n\n  email: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.email(message))),\n\n  url: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.url(message))),\n\n  uuid: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.uuid(message))),\n\n  ip: ruleBuilder()\n    .withValidatorFactory(({message}) => zodAnyToValidator(scheme.ip(message))),\n\n  datetime: ruleBuilder()\n    .withParameter('precision', 'number')\n    .withParameter('offset', 'boolean')\n    .withValidatorFactory(({message, offset, precision}) => zodAnyToValidator(scheme.datetime({message, offset, precision}))),\n\n  includes: ruleBuilder()\n    .withParameter('value', 'string', true)\n    .withParameter('position', 'number')\n    .withValidatorFactory(({message, value, position}) => zodAnyToValidator(scheme.includes(value, {message, position}))),\n\n  startsWith: ruleBuilder()\n    .withParameter('value', 'string', true)\n    .withValidatorFactory(({message, value}) => zodAnyToValidator(scheme.startsWith(value, message))),\n\n  endsWith: ruleBuilder()\n    .withParameter('value', 'string', true)\n    .withValidatorFactory(({message, value}) => zodAnyToValidator(scheme.endsWith(value, message))),\n\n  code: ruleBuilder()\n    .withParameter('code', 'string', true, undefined, 'code')\n    .withValidatorFactory(({code, message}) => {\n      const checker = AsyncFunction('value', code) as (value: string) => Promise<boolean>\n      return zodAnyToValidator(scheme.refine(checker, message))\n    })\n}\n","import {ZodArrayRules} from '../rules/ZodArrayRules'\nimport {ZodBooleanRules} from '../rules/ZodBooleanRules'\nimport {ZodDateRules} from '../rules/ZodDateRules'\nimport {ZodNumberRules} from '../rules/ZodNumberRules'\nimport {ZodObjectRules} from '../rules/ZodObjectRules'\nimport {ZodStringRules} from '../rules/ZodStringRules'\nimport type {SchemaType} from '../types/SchemaType'\nimport type {ValidationRuleSet} from '../types/ValidationRuleSet'\n\nexport const ZodValidationRules: Record<SchemaType, ValidationRuleSet> = {\n  'string': ZodStringRules,\n  'number': ZodNumberRules,\n  'boolean': ZodBooleanRules,\n  'date': ZodDateRules,\n  'object': ZodObjectRules,\n  'array': ZodArrayRules,\n  'enum': {}\n}\n","import type {SchemaType} from '../types/SchemaType'\n\nconst same = (from: any) => from\n\nconst error = (from: any) => {\n  throw new Error(`Cannot convert from '${from}'`)\n}\n\nconst parse = (from: any) => JSON.parse(from)\n\nconst stringify = (from: any) => JSON.stringify(from)\n\nconst toString = (from: any) => from.toString()\n\nconst ifInstanceThenSame = (constructor: any) => {\n  return (from: any) => from instanceof constructor ? from : error(from)\n}\nconst toNumber = (from: any) => {\n  const result = Number(from)\n  if (isNaN(result)) error(from)\n  return result\n}\n\nconst toDate = (from: any) => new Date(from)\n\nconst converters: Record<SchemaType, Record<SchemaType, (from: any) => any>> = {\n  'string': {\n    'string': same,\n    'number': toNumber,\n    'boolean': (from: string) => from === 'true',\n    'object': parse,\n    'array': parse,\n    'enum': same,\n    'date': toDate\n  },\n  'number': {\n    'string': toString,\n    'number': same,\n    'boolean': (from: number) => from === 1,\n    'object': error,\n    'array': error,\n    'enum': same,\n    'date': toDate\n  },\n  'boolean': {\n    'string': toString,\n    'number': (from: boolean) => from ? 1 : 0,\n    'boolean': same,\n    'object': error,\n    'array': error,\n    'enum': same,\n    'date': error\n  },\n  'object': {\n    'string': stringify,\n    'number': error,\n    'boolean': error,\n    'object': same,\n    'array': error,\n    'enum': same,\n    'date': error\n  },\n  'array': {\n    'string': stringify,\n    'number': error,\n    'boolean': error,\n    'object': error,\n    'array': same,\n    'enum': same,\n    'date': error\n  },\n  'enum': {\n    'string': stringify,\n    'number': ifInstanceThenSame(Number),\n    'boolean': ifInstanceThenSame(Boolean),\n    'object': ifInstanceThenSame(Object),\n    'array': ifInstanceThenSame(Array),\n    'enum': same,\n    'date': ifInstanceThenSame(Date)\n  },\n  'date': {\n    'string': toString,\n    'number': (from: Date) => from.getTime(),\n    'boolean': error,\n    'object': error,\n    'array': error,\n    'enum': same,\n    'date': same\n  }\n}\n\nconst getValueType = (value: unknown): SchemaType => {\n  if (typeof value === 'string') return 'string'\n  if (typeof value === 'number') return 'number'\n  if (typeof value === 'boolean') return 'boolean'\n  if (value instanceof Date) return 'date'\n  if (Array.isArray(value)) return 'array'\n  if (typeof value === 'object') return 'object'\n  return 'enum'\n}\n\n/**\n * Converts a value from one type to another.\n * @param from the value to convert.\n * @param toType the type to convert to.\n * @returns the converted value.\n */\nexport const autoConvertField = (from: any, toType: SchemaType): unknown => {\n  if (from === null || typeof from === 'undefined') return undefined\n\n  const fromType = getValueType(from)\n  const converter = converters[fromType]?.[toType]\n  if (!converter) throw new Error(`Cannot convert ${from} from '${fromType}' to '${toType}'`)\n  try {\n    return converter(from)\n  } catch (e) {\n    throw new Error(`Cannot convert ${from} from '${fromType}' to '${toType}'. ${e}.`)\n  }\n}\n","import {FormViewerValidationRules} from '../../../stores/FormViewerValidationRules'\nimport {isPromise} from '../../../utils'\nimport type {BoundValueSchema} from '../types/BoundValueSchema'\nimport type {RuleValidator} from '../types/RuleValidator'\nimport type {ValidationResult} from '../types/ValidationResult'\nimport type {ValidationRuleParameter} from '../types/ValidationRuleParameter'\nimport type {ValidationRuleSettings} from '../types/ValidationRuleSettings'\nimport type {ResolvedValidator} from './DataValidator'\n\n/**\n * Returns the function that creates a validator for the value.\n * @param validationRules the validation rules for FormViewer.\n * @returns the function that creates a validator for the value.\n */\nexport function typedValidatorsResolver(validationRules: FormViewerValidationRules) {\n  return function (schema?: BoundValueSchema) {\n    return validatorsResolver(validationRules, schema)\n  }\n}\n\ntype ValidatorWithSettings = {\n  settings: ValidationRuleSettings,\n  validator: RuleValidator\n  params?: ValidationRuleParameter[]\n}\n\n/**\n * Creates a validator for the specified value validation rules.\n * @param validationRules the validation rules for FormViewer.\n * @param schema the value validation rules.\n * @returns the validation function.\n */\nfunction validatorsResolver(validationRules: FormViewerValidationRules, schema?: BoundValueSchema): ResolvedValidator {\n  const validators = parse(validationRules, schema)\n\n  return async (value, store) => {\n    if (!validators) return\n\n    const validationResults: ValidationResult[] = []\n    for (const {settings, validator, params} of validators) {\n      const args: Record<string, unknown> = {}\n      params?.filter(param => typeof param.default !== 'undefined')\n        .map(param => args[param.key] = param.default)\n      Object.assign(args, settings.args)\n      const result = validator(value, store, args)\n      const ruleResult = isPromise(result) ? await result : result\n      if (ruleResult !== true) {\n        validationResults.push({\n          settings: settings,\n          message: typeof ruleResult === 'string' ? ruleResult : args.message as string\n        })\n      }\n    }\n    return validationResults\n  }\n}\n\nconst noOpValidator = () => true\n\nfunction parse(validationRules: FormViewerValidationRules, schema?: BoundValueSchema): ValidatorWithSettings[] | undefined {\n  if (!schema || !schema.validations || !schema.validations.length) return\n\n  const rules = [...schema.validations].sort(byPriority)\n  const toValidator = (rule: ValidationRuleSettings) => {\n    if (!rule.type) {\n      const definition = validationRules.internal[rule.key]\n      const validator = definition.validatorFactory(rule.args ?? {})\n      return {settings: rule, validator, params: definition.params}\n    }\n    if (rule.type === 'custom') {\n      const definition = validationRules.custom?.[rule.key]\n      if (definition) return {settings: rule, validator: definition.validate, params: definition.params}\n    }\n    console.warn(`Cannot find rule, key: '${rule.key}', type: '${rule.type}'`)\n    return {settings: rule, validator: noOpValidator}\n  }\n\n  return rules.map(toValidator)\n}\n\n//The 'required' rule must be implemented first, because it is a root for next\n//The 'code' rule (used refine under the hood) must be implemented last\nfunction byPriority(_: ValidationRuleSettings, b: ValidationRuleSettings) {\n  if (b.key === 'code') return -1\n  if (b.key === 'required') return 1\n  return 0\n}\n","import {autorun, makeAutoObservable, observable, untracked} from 'mobx'\nimport {ComponentStore} from '../../../stores/ComponentStore'\nimport type {FormViewerValidationRules} from '../../../stores/FormViewerValidationRules'\nimport type {IStore} from '../../../stores/IStore'\nimport {needRender} from '../../../utils/needRender'\nimport {nameAutorun, nameObservable} from '../../../utils/observableNaming'\nimport {Model} from '../../define'\nimport type {SchemaType} from '../types/SchemaType'\nimport {autoConvertField} from './autoConvertField'\nimport {DataValidator} from './DataValidator'\nimport {Field} from './Field'\nimport {typedValidatorsResolver} from './validatorsResolver'\nimport {ValidationMessages} from \"../types/ValidationResult\";\n\n/**\n * Type for the function that disposes resources.\n */\nexport type Disposer = () => void\n\n/**\n * Field with form data, contains only one value. **Internal use only.**\n */\nexport class SimpleField implements Field {\n\n  #oldDataValidator?: DataValidator\n\n  /**\n   * @inheritDoc\n   */\n  error?: string\n\n  /**\n   * @inheritDoc\n   */\n  touched = false\n\n  /**\n   * @inheritDoc\n   */\n  value: unknown = undefined\n\n  /**\n   * @inheritDoc\n   */\n  valued: string\n  /**\n   * The type of the field value.\n   */\n  valueType: SchemaType\n  dataValidator?: DataValidator\n  readonly #disposers: Disposer[]\n\n  /**\n   * Creates the field with form data for the component.\n   * @param store the form viewer settings.\n   * @param componentStore the component settings.\n   * @param model the component metadata for the form viewer.\n   * @param valueCalculator the function to get a calculated value for the field.\n   * @param getValidationRules the function to get validation rules for the field.\n   * @param deferFieldCalculation if true, then the calculated field must be explicitly initialized.\n   */\n  constructor(\n    readonly store: IStore,\n    readonly componentStore: ComponentStore,\n    readonly model: Model,\n    readonly valueCalculator: (component: ComponentStore, key: string) => [boolean, any?],\n    readonly getValidationRules: (valueType: SchemaType) => FormViewerValidationRules,\n    public deferFieldCalculation: boolean,\n  ) {\n    if (!model.valued) throw new Error(`'model.valued' is falsy`)\n    if (!model.valueType) throw new Error(`'model.typeOfValue' is undefined`)\n    this.valued = model.valued\n    this.valueType = model.valueType\n\n    const className = 'SimpleField'\n\n    makeAutoObservable(this, {\n      model: false,\n      valueCalculator: false,\n      dataValidator: observable.ref\n    }, {name: nameObservable(className, {key: componentStore.key})})\n\n    this.#disposers = [\n      autorun(\n        () => {\n          this.dataValidator = DataValidator.create(\n            store,\n            typedValidatorsResolver(this.getValidationRules(this.valueType)),\n            componentStore.schema,\n            error => this.error = error,\n            store.localizeErrorMessages.bind(store, componentStore))\n          untracked(() => {\n            this.#oldDataValidator?.dispose()\n            this.#oldDataValidator = this.dataValidator\n          })\n        }\n        , {name: nameAutorun(className, 'setValidator', {key: componentStore.key})}),\n      autorun(\n        () => {\n          const simpleValue = store.initialDataSlice?.[componentStore.key] ?? this.initialValue\n          if (this.deferFieldCalculation) {\n            this.value = simpleValue\n            return\n          }\n          const [calculated, value] = this.valueCalculator(componentStore, this.valued)\n          if (calculated) {\n            this.value = value\n            return\n          }\n          this.value = simpleValue\n        }\n        , {name: nameAutorun(className, 'setValue', {'key': componentStore.key})}),\n      () => this.dataValidator?.dispose()\n    ]\n  }\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    this.deferFieldCalculation = false\n  }\n\n  /**\n   * @returns the initial value for the field.\n   */\n  get initialValue() {\n    return this.componentStore.props[this.valued]?.value ?? this.defaultValue\n  }\n\n  /**\n   * @returns the default value for the field.\n   */\n  get defaultValue() {\n    return this.model.defaultProps?.[this.valued]\n  }\n\n  /**\n   * @inheritDoc\n   */\n  dispose() {\n    this.#disposers.forEach(dispose => dispose())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setValue(value: unknown) {\n    this.value = autoConvertField(value, this.valueType)\n    if (!this.needValidate) {\n      this.clearError()\n      return\n    }\n    if (this.componentStore.schema?.autoValidate !== false) {\n      this.dataValidator?.sendValidationEvent?.(this.value)\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTouched() {\n    this.touched = true\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async validate() {\n    if (!this.needValidate) {\n      this.clearError()\n      return\n    }\n    await this.dataValidator?.validate?.(this.value)\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async getValidationResult() {\n    if (!this.needValidate) return\n    const result = await this.dataValidator?.getValidationResult?.(this.value)\n    return result?.map(({message}) => message) as ValidationMessages\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reset() {\n    this.value = this.initialValue ?? this.defaultValue\n    this.clearError()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clear() {\n    this.value = this.defaultValue\n    this.touched = false\n    this.clearError()\n  }\n\n  /**\n   * @returns true if the field should be validated, false otherwise.\n   */\n  get needValidate() {\n    return needRender(this.componentStore, this.store.form.componentTree)\n  }\n\n  /**\n   * Clears the error message for this field.\n   */\n  clearError() {\n    this.error = undefined\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setError = (error: unknown) => {\n    if (typeof error !== 'string') {\n      throw new Error(`Expected 'string' type, got '${typeof error}'`)\n    }\n    this.error = error\n  }\n}\n","import {ComponentStore} from '../../../stores/ComponentStore'\n\n/**\n * Returns true if the component's data should be stored in the parent form's data, otherwise, false.\n * @param componentStore the component settings.\n * @returns true if the component's data should be stored in the parent form's data, otherwise, false.\n */\nexport function isStoreDataInParentForm(componentStore: ComponentStore) {\n  const val = componentStore.props['storeDataInParentForm']?.value\n  return typeof val === 'undefined' ? true : val\n}\n","import {makeAutoObservable} from 'mobx'\nimport {ComponentStore} from '../../../stores/ComponentStore'\nimport type {IStore} from '../../../stores/IStore'\nimport {nameObservable} from '../../../utils/observableNaming'\nimport type {Field} from './Field'\nimport {isStoreDataInParentForm} from './util'\n\n/**\n * The field with the form data, contains the value of the nested form. **Internal use only.**\n */\nexport class TemplateField implements Field {\n\n  /**\n   * @inheritDoc\n   */\n  valued = ''\n\n  /**\n   * @inheritDoc\n   */\n  touched = false\n\n  /**\n   * Creates the nested form field with form data for the component.\n   * @param componentStore the component settings.\n   * @param viewerStore viewerStore the form viewer settings.\n   */\n  constructor(\n    readonly componentStore: ComponentStore,\n    readonly viewerStore: IStore,\n  ) {\n    makeAutoObservable(this, undefined,\n      {name: nameObservable('FormField', {key: componentStore.key})})\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get storeDataInParentForm() {\n    return isStoreDataInParentForm(this.componentStore)\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get value(): unknown {\n    return this.form.data\n  }\n\n  /**\n   * @inheritDoc\n   */\n  dispose() {\n    this.viewerStore.dispose()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clear(): void {\n    this.form.clear()\n    this.touched = false\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reset(): void {\n    this.form.reset()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTouched(): void {\n    this.touched = true\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setValue(value: unknown): void {\n    if (!value) {\n      this.form.reset()\n      return\n    }\n    if (typeof value !== 'object') throw new Error(`Expected 'object' type, got '${typeof value}'`)\n\n    const data: Record<string, any> = value\n    this.form.fields.forEach((field, key) => {\n      const val = data[key]\n      // prevent uncontrolled value\n      typeof val === 'undefined' ? field.reset() : field.setValue(val)\n    })\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async validate() {\n    await this.form.validate()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async getValidationResult() {\n    return await this.form.getValidationResult()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    this.form.fields.forEach(field => field.init())\n  }\n\n  /**\n   * @returns the form for the field.\n   */\n  get form() {\n    return this.viewerStore.form.componentTree\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get errors() {\n    return this.form.errors\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setError = (error: unknown) => {\n    if (!error) return\n    if (typeof error !== 'object') throw new Error(`Expected 'object' type, got '${typeof error}'`)\n    const errorObject: Record<string, any> = error\n    this.form.fields.forEach((field, key) => {\n      if (errorObject[key]) return field.setError(errorObject[key])\n      if (field.storeDataInParentForm) return field.setError(errorObject)\n    })\n  }\n}\n","/**\n * Generates a unique name with the specified prefix. **Internal use only.**\n * @param prefix the prefix.\n * @param existingNames the set of existing names to match with which uniqueness will be checked.\n * @returns the generated name.\n */\nexport function generateUniqueName(prefix: string, existingNames: Set<string>) {\n  let i = 1\n  while (i < 10_000) {\n    const name = `${prefix}${i}`\n    if (!existingNames.has(name)) return name\n    i++\n  }\n  const time = new Date().getTime()\n  return `${prefix}_${time}`\n}\n","import {makeAutoObservable} from 'mobx'\nimport {ActionData, ActionDefinition, ActionValues, NamedActionDefinition} from '../features/event'\nimport {Language} from '../features/localization/types'\nimport {ComponentData} from '../utils/contexts/ComponentDataContext'\nimport {generateUniqueName} from '../utils/generateUniqueName'\nimport {ComponentStore} from './ComponentStore'\nimport {LocalizationStore} from './LocalizationStore'\n\n/**\n * Represents a form that is rendered in Viewer or edited in Builder.\n */\nexport class Form {\n  /**\n   * Root component of the form.\n   */\n  readonly componentTree: ComponentData\n\n  /**\n   * Localization of the form.\n   */\n  readonly localization: LocalizationStore\n\n  /**\n   * Localization languages of the form.\n   */\n  readonly languages: Language[] = []\n\n  /**\n   * The set of action definitions.\n   */\n  readonly actions: ActionValues\n\n  /**\n   * Properties of the component displaying the error.\n   */\n  errorProps: any = {}\n\n  /**\n   * The type name of the component displaying the tooltip.\n   */\n  tooltipType?: string\n\n  /**\n   * The type name of the component displaying the error.\n   */\n  errorType?: string\n\n  /**\n   * Default localization language of the form.\n   */\n  defaultLanguage: Language\n\n  /**\n   * Creates a new instance of Form.\n   * @param componentTree the root component of the form.\n   * @param localization the localization of the form.\n   * @param actions the form custom actions.\n   * @param languages the localization languages of the form.\n   * @param defaultLanguage the default localization language of the form.\n   */\n  constructor(componentTree: ComponentData, localization: LocalizationStore, actions: ActionValues,\n              languages: Language[], defaultLanguage: Language) {\n    this.componentTree = componentTree\n    this.localization = localization\n    this.actions = actions\n    this.languages = languages\n    this.defaultLanguage = defaultLanguage\n\n    this.componentTree.events.onBeforeDelete.subscribe(this.onComponentDataBeforeDelete.bind(this))\n    this.componentTree.events.onAfterKeyChanged.subscribe(this.onComponentDataAfterKeyChanged.bind(this))\n\n    makeAutoObservable(this)\n  }\n\n  /**\n   * @returns the actions names array.\n   */\n  get actionNames(): string[] {\n    return Object.keys(this.actions)\n  }\n\n  /**\n   * Initializes form fields.\n   */\n  initFields() {\n    this.componentTree.fields.forEach(field => field.init())\n  }\n\n  /**\n   * Disposes the form. Disposes all the components and localization.\n   */\n  dispose() {\n    this.componentTree.dispose()\n  }\n\n  /**\n   * Removes the action from the form.\n   * @param name the action name to remove.\n   */\n  removeAction(name: string) {\n    delete this.actions[name]\n    this.removeCodeActionBinding(name, this.componentTree.store)\n  }\n\n  /**\n   * Changes the existing action to the new one, adds the action if the existing action is not found.\n   * @param oldActionName the existing action name.\n   * @param newAction the new named action.\n   */\n  updateOrAddAction(oldActionName: string, newAction: NamedActionDefinition) {\n    this.actions[newAction.name] = newAction.actionDefinition\n    this.rebindActionHandlers(this.componentTree.store, oldActionName, newAction)\n    if (oldActionName !== newAction.name) {\n      delete this.actions[oldActionName]\n    }\n  }\n\n  /**\n   * Clones the action.\n   * @param namedAction the named action to clone.\n   */\n  cloneAction(namedAction: NamedActionDefinition) {\n    if (!this.actions) return\n    const existingNames = new Set(this.actionNames)\n    const data = JSON.parse(JSON.stringify(namedAction.actionDefinition))\n    const actionName = generateUniqueName(`${namedAction.name}_`, existingNames)\n    this.actions[actionName] = ActionDefinition.createFromObject(data)\n  }\n\n  private rebindActionData(actionData: ActionData, newAction: NamedActionDefinition) {\n    actionData.name = newAction.name\n    const args = actionData.args\n    if (!args) return\n\n    const newActionParamNames = new Set<string>(Object.keys(newAction.actionDefinition.params))\n    Object.keys(args).forEach(key => {\n      if (!newActionParamNames.has(key)) delete args[key]\n    })\n  }\n\n  private rebindActionHandlers(componentStore: ComponentStore, oldActionName: string, newAction: NamedActionDefinition) {\n    const events = componentStore.events\n    if (events) {\n      Object.keys(events).forEach(value => {\n        const bindings = events[value]\n        bindings?.filter(item => item.type === 'code' && item.name === oldActionName)\n          .forEach(item => this.rebindActionData(item, newAction))\n      })\n    }\n    componentStore.children?.forEach(item => {\n      this.rebindActionHandlers(item, oldActionName, newAction)\n    })\n  }\n\n  private removeCodeActionBinding(actionName: string, componentStore: ComponentStore) {\n    const events = componentStore.events\n    if (events) {\n      Object.keys(events).forEach(value => {\n        const bindings = events[value]\n        if (!bindings.length) return\n        events[value] = bindings.filter(item => !(item.type === 'code' && item.name === actionName))\n      })\n    }\n    componentStore.children?.forEach(item => this.removeCodeActionBinding(actionName, item))\n  }\n\n  private onComponentDataBeforeDelete(component: ComponentData) {\n    this.localization.removeLocalization(component.key)\n  }\n\n  private onComponentDataAfterKeyChanged(_: ComponentData, {oldKey, newKey}: { oldKey: string, newKey: string }) {\n    this.localization.changeComponentKey(oldKey, newKey)\n  }\n}\n","import {FluentBundle, FluentResource} from '@fluent/bundle'\nimport {makeAutoObservable} from 'mobx'\nimport {getFluentCompatibleId} from '../features/localization/getFluentCompatibleId'\nimport {nameObservable} from '../utils/observableNaming'\n\n/**\n * The format in which localization is stored.\n * @example\n * {\n *  \"en-US\" :\n *  {\n *    \"componentKey:\n *      {\n *        \"property\" : \"This {$value} is localized!\"\n *      }\n *  }\n * }\n */\nexport type LocalizationValue = Record<LanguageFullCode, ComponentsLocalization>\n\n/**\n * A record containing localizations grouped by component key.\n */\nexport type ComponentsLocalization = Record<ComponentKey, TypedLocalization>\n\n/**\n * A record containing localizations grouped by localization type.\n */\nexport type TypedLocalization = Partial<Record<LocalizationType, ComponentPropsLocalization>>\n\n/**\n * A record containing localizations for the component properties.\n */\nexport type ComponentPropsLocalization = Record<ComponentPropertyName, string>\n\n/**\n * The full language code, e.g. 'en-US'.\n */\nexport type LanguageFullCode = string\n\n/**\n * The component key.\n */\nexport type ComponentKey = string\n\n/**\n * The component property name.\n */\nexport type ComponentPropertyName = string\n\nconst className = 'LocalizationStore'\n\n/**\n * Represents the type of localization. The localization can be for a component, tooltip or for validator.\n */\nexport type LocalizationType = 'component' | 'tooltip' | string\n\nclass FluentBundleHolder {\n\n  constructor(readonly languageFullCode: LanguageFullCode,\n              readonly localizationStore: LocalizationStore) {\n    makeAutoObservable(this, undefined, {name: nameObservable('FluentBundleHolder')})\n  }\n\n  get fluentBundle() {\n    const componentsLocalization = this.localizationStore.value[this.languageFullCode]\n    const bundle = new FluentBundle(this.languageFullCode)\n\n    if (componentsLocalization) {\n      const localizationItems = this.#getLocalizationItems(componentsLocalization)\n      localizationItems.forEach(item => {\n        const errors = bundle.addResource(new FluentResource(item))\n        if (errors.length > 0) {\n          console.error(`Unable to add localization resource: ${item}`)\n          errors.forEach(console.error)\n        }\n      })\n    }\n\n    return bundle\n  }\n\n  #getLocalizationItems(componentsLocalization: ComponentsLocalization) {\n    const localizationItems: string[] = []\n    Object.entries(componentsLocalization).forEach(([componentKey, allComponentsLocalizationConstants]) => {\n      Object.entries(allComponentsLocalizationConstants ?? {}).forEach(([type, componentLocalizationConstants]) => {\n        Object.entries(componentLocalizationConstants ?? {}).forEach(([propertyName, localizationConstant]) => {\n          if (localizationConstant) localizationItems.push(`${componentKey}_${type}_${propertyName} = ${localizationConstant}`)\n        })\n      })\n    })\n    return localizationItems\n  }\n}\n\n/**\n * Observable storage of localization. **Internal use only.**\n */\nexport class LocalizationStore {\n\n  private localizationCache = new Map<string, FluentBundleHolder>()\n\n  /**\n   * The localization data.\n   */\n  readonly value: LocalizationValue = {}\n\n  /**\n   * Returns value of localization constant.\n   * @param languageFullCode the full code (en-US, en-GB etc.) of the language we are looking to localize.\n   * @param componentKey the component we are looking to localize.\n   * @param propertyName the property name we are looking to localize.\n   * @param type the type of localization.\n   * @returns the value of localization constant.\n   */\n  getLocalization(languageFullCode: string, componentKey: string, propertyName: string, type: LocalizationType) {\n    const fluentCompatibleComponentKey = getFluentCompatibleId(componentKey)\n    const fluentCompatiblePropertyName = getFluentCompatibleId(propertyName)\n    return this.value[languageFullCode]?.[fluentCompatibleComponentKey]?.[type]?.[fluentCompatiblePropertyName]\n  }\n\n  /**\n   * Sets localization for component property.\n   * @param languageFullCode the full code (en-US, en-GB etc.) of the language in which localization will be set.\n   * @param componentKey the component key that requires localization.\n   * @param propertyName the component's property name to be localized.\n   * @param type the type of localization.\n   * @param value the localization value.\n   */\n  setLocalization(languageFullCode: string, componentKey: string, propertyName: string, type: LocalizationType, value: string) {\n    const fluentCompatibleComponentKey = getFluentCompatibleId(componentKey)\n    const fluentCompatiblePropertyName = getFluentCompatibleId(propertyName)\n    this.value[languageFullCode] ??= {}\n    this.value[languageFullCode][fluentCompatibleComponentKey] ??= {}\n    this.value[languageFullCode][fluentCompatibleComponentKey][type] ??= {}\n    this.value[languageFullCode][fluentCompatibleComponentKey][type]![fluentCompatiblePropertyName] = value\n  }\n\n  /**\n   * Removes localization for component.\n   * @param componentKey the component key that requires localization removal.\n   */\n  removeLocalization(componentKey: string) {\n    const fluentCompatibleComponentKey = getFluentCompatibleId(componentKey)\n    for (const key in this.value) {\n      delete this.value[key][fluentCompatibleComponentKey]\n      if (Object.keys(this.value[key]).length === 0) {\n        delete this.value[key]\n      }\n    }\n  }\n\n  /**\n   * Removes localization for component with specified type.\n   * @param componentKey the component key that requires localization removal.\n   * @param type the localization type.\n   */\n  removeLocalizationForType(componentKey: string, type: LocalizationType) {\n    const fluentCompatibleComponentKey = getFluentCompatibleId(componentKey)\n    for (const key in this.value) {\n      if (!this.value[key][fluentCompatibleComponentKey]) continue\n      delete this.value[key][fluentCompatibleComponentKey][type]\n      if (Object.keys(this.value[key][fluentCompatibleComponentKey]).length === 0) {\n        delete this.value[key][fluentCompatibleComponentKey]\n      }\n      if (Object.keys(this.value[key]).length === 0) {\n        delete this.value[key]\n      }\n    }\n  }\n\n  /**\n   * Checks that the specified language exists in the localization.\n   * @param languageFullCode The full code (en-US, en-GB etc.) of the language to be checked.\n   * @returns true if the specified language exists in the localization.\n   */\n  hasLanguage(languageFullCode: string) {\n    return !!this.value[languageFullCode]\n  }\n\n  /**\n   * Checks that the specified property has localization.\n   * @param componentKey the component we are looking to localize.\n   * @param propertyName the component's property name to be localized.\n   * @param type the type of localization.\n   * @returns true if the specified property has localization in at least one language.\n   */\n  hasLocalization(componentKey: string, propertyName: string, type: LocalizationType) {\n    const key = getFluentCompatibleId(componentKey)\n    const property = getFluentCompatibleId(propertyName)\n    return Object.values(this.value).some(localization => {\n      return localization?.[key]?.[type]?.[property]\n    })\n  }\n\n  /**\n   * If the FluentBundle for the specified language is found, this function returns it.\n   * Otherwise, an empty FluentBundle is returned.\n   * @param languageFullCode the full code (en-US, en-GB etc.) of the language to get fluent bundle.\n   * @returns the FluentBundle for the specified language.\n   */\n  getFluentBundle(languageFullCode: string) {\n    const holder = this.localizationCache.get(languageFullCode) ?? new FluentBundleHolder(languageFullCode, this)\n    if (!this.localizationCache.has(languageFullCode)) this.localizationCache.set(languageFullCode, holder)\n    return holder.fluentBundle\n  }\n\n  /**\n   * Changes the component key for all languages in the value object.\n   * @param oldComponentKey the old component key to be replaced.\n   * @param newComponentKey the new component key to replace the old component key.\n   */\n  changeComponentKey(oldComponentKey: string, newComponentKey: string) {\n    const fluentCompatibleOldComponentKey = getFluentCompatibleId(oldComponentKey)\n    const fluentCompatibleNewComponentKey = getFluentCompatibleId(newComponentKey)\n    for (const languageFullCode in this.value) {\n      const component = this.value[languageFullCode][fluentCompatibleOldComponentKey]\n      if (component) {\n        this.value[languageFullCode][fluentCompatibleNewComponentKey] = component\n        delete this.value[languageFullCode][fluentCompatibleOldComponentKey]\n      }\n    }\n  }\n\n  /**\n   * Retrieves the localization values for a given component key.\n   * @param componentKey the key of the component to retrieve localization for.\n   * @returns the object containing the localization values for the component in each supported language.\n   */\n  getLocalizationForComponent(componentKey: string) {\n    const fluentCompatibleComponentKey = getFluentCompatibleId(componentKey)\n    const localization: LocalizationValue = {}\n    for (const languageFullCode in this.value) {\n      const component = this.value[languageFullCode][fluentCompatibleComponentKey]\n      if (component) {\n        localization[languageFullCode] = {}\n        localization[languageFullCode][componentKey] = component\n      }\n    }\n    return localization\n  }\n\n  /**\n   * Inserts the localization values for a given component key. Replaces the old component key with the new component key.\n   * @param localization the localization object for insertion.\n   * @param oldComponentKey the old component key that needs to be replaced.\n   * @param newComponentKey the new component key to be added.\n   */\n  addLocalizationWithNewKey(localization: LocalizationValue, oldComponentKey: string, newComponentKey: string) {\n    const fluentCompatibleNewComponentKey = getFluentCompatibleId(newComponentKey)\n    for (const languageFullCode in localization) {\n      const component = localization[languageFullCode][oldComponentKey]\n      if (component) {\n        this.value[languageFullCode][fluentCompatibleNewComponentKey] = component\n      }\n    }\n  }\n\n  /**\n   * The constructor.\n   * @param value the initial localization value.\n   */\n  constructor(value: LocalizationValue = {}) {\n    makeAutoObservable(this, undefined, {name: nameObservable(className)})\n\n    this.value = value\n  }\n}\n","import type {ActionValues} from '../features/event'\nimport {Language} from '../features/localization/types'\nimport {ComponentStore} from './ComponentStore'\nimport {LocalizationValue} from './LocalizationStore'\n\n/**\n * The version of the saved form.\n */\nexport enum PersistedFormVersion {\n  version1 = '1'\n}\n\n/**\n * The format for saving a form designed in Form Builder.\n */\nexport interface PersistedForm {\n\n  /**\n   * The version of the saved form.\n   */\n  version?: PersistedFormVersion\n\n  /**\n   * Represents a set of action definitions.\n   */\n  actions?: ActionValues,\n\n  /**\n   * Properties of the component displaying the error.\n   */\n  errorProps?: any,\n\n  /**\n   * Name of the type of component that displays the tooltip.\n   */\n  tooltipType?: string,\n\n  /**\n   * Name of the type of component displaying the error.\n   */\n  errorType?: string,\n\n  /**\n   * Settings for components that display the form.\n   */\n  form: ComponentStore,\n\n  /**\n   * Localization of the form.\n   */\n  localization: LocalizationValue,\n\n  /**\n   * Form languages.\n   */\n  languages: Language[],\n\n  /**\n   * The default form language.\n   */\n  defaultLanguage: string\n}\n","import {assign} from 'lodash-es'\nimport {makeObservable, observable} from 'mobx'\nimport {Subject} from 'rxjs'\nimport {calculatePropertyValue} from '../features/calculation/propertyCalculator'\nimport {Model} from '../features/define'\nimport {ActionData, ActionDefinition, ActionEventArgs, ActionType, createActionValuesFromObject} from '../features/event'\nimport {commonActions} from '../features/event/consts/actions'\nimport type {IFormViewer} from '../features/form-viewer'\nimport {localizeErrorMessage, localizeProperties} from '../features/localization/localizer'\nimport {Language} from '../features/localization/types'\nimport {createTemplateModel} from '../features/template'\nimport {buildInternalErrorModel, buildInternalErrorStore} from '../features/ui/internalErrorModel'\nimport {screenModel} from '../features/ui/screenModel'\nimport {getTemplateName, isTemplateType} from '../features/ui/templateUtil'\nimport type {SchemaType} from '../features/validation'\nimport type {ValidationResult} from '../features/validation/types/ValidationResult'\nimport {ZodValidationRules} from '../features/validation/utils/consts'\nimport {getDefaultErrorMessage} from '../features/validation/utils/DataValidator'\nimport {SimpleField} from '../features/validation/utils/SimpleField'\nimport {TemplateField} from '../features/validation/utils/TemplateField'\nimport {isStoreDataInParentForm} from '../features/validation/utils/util'\nimport type {ViewMode} from '../types'\nimport {isNumber, isPromise, isRecord, isString} from '../utils'\nimport {ComponentData} from '../utils/contexts/ComponentDataContext'\nimport {nameObservable} from '../utils/observableNaming'\nimport {ComponentStore, isFunctionalProperty, isLocalizedProperty} from './ComponentStore'\nimport {Form} from './Form'\nimport {FormViewerPropsStore} from './FormViewerPropsStore'\nimport type {FormViewerValidationRules} from './FormViewerValidationRules'\nimport type {IStore} from './IStore'\nimport {LocalizationStore, LocalizationType} from './LocalizationStore'\nimport type {PersistedForm} from './PersistedForm'\nimport {PersistedFormVersion} from './PersistedForm'\n\nconst propertiesToFix: Record<string, string[]> = {\n  'RsDatePicker': ['calendarDefaultDate', 'defaultValue', 'value'],\n  'RsCalendar': ['defaultValue', 'value'],\n}\n\n/**\n * Reduction function type.\n */\ntype ReduceCallback<U, T> = (accumulator: T, current: U) => T\n\n/**\n * Type for a tree object.\n */\ntype Tree<T, U extends keyof T> = T & { [K in U]: Tree<T, K>[] | undefined }\n\nfunction reduceTree<U extends object, T, K extends keyof U>(tree: Tree<U, K>,\n                                                            callback: ReduceCallback<Tree<U, K>, T>,\n                                                            initialValue: T, childKey: K) {\n  let accumulator = callback(initialValue, tree)\n  tree[childKey]?.forEach((child: Tree<U, K>) => {\n    accumulator = reduceTree(child, callback, accumulator, childKey)\n  })\n  return accumulator\n}\n\nconst globalDefaultLanguage = new Language('en', 'US', 'English', 'American English')\n\n/**\n * The form viewer settings. **Internal use only.**\n */\nexport class Store implements IStore, IFormViewer {\n\n  /**\n   * The currently selected language.\n   */\n  selectedLanguage?: Language\n\n  /**\n   * The Subject for submitting form events.\n   */\n  readonly eventSubject = new Subject<ActionEventArgs>()\n\n  /**\n   * Current display resolution type.\n   */\n  viewMode: ViewMode = 'desktop'\n\n  /**\n   * The form.\n   */\n  form: Form\n\n  /**\n   * Models for templates that have not been explicitly defined.\n   */\n  #templateMap = new Map<string, Model>()\n\n  /**\n   * Creates form viewer settings.\n   * @param formViewerPropsStore the form viewer store settings.\n   * @param parentStore the form viewer settings, used in templates.\n   * @param parentComponentStore the parent component settings.\n   */\n  constructor(public formViewerPropsStore: FormViewerPropsStore,\n              public readonly parentStore?: Store,\n              public readonly parentComponentStore?: ComponentStore) {\n    const componentTree = this.createComponentData(new ComponentStore(screenModel.name, screenModel.type))\n    const localization = new LocalizationStore()\n    this.form = new Form(componentTree, localization, {}, [], globalDefaultLanguage)\n\n    makeObservable(this, {\n      form: observable,\n      viewMode: true,\n      selectedLanguage: true,\n      clear: true,\n      parentStore: observable.ref,\n      parentComponentStore: observable.ref,\n      initialDataSlice: true\n    }, {name: nameObservable(`ViewerStore`)})\n  }\n\n  /**\n   * @returns the Record with the common actions.\n   */\n  get commonActions() {\n    return commonActions\n  }\n\n  /**\n   * Returns an action by the specified action name and action type.\n   * @param name the action name.\n   * @param type the action type.\n   * @returns the action.\n   */\n  getAction(name: string, type: ActionType) {\n    let action: ActionDefinition | undefined = undefined\n    switch (type) {\n      case 'common':\n        action = this.commonActions[name]\n        break\n      case 'code':\n        action = this.form.actions[name]\n        break\n      case 'custom':\n        action = this.formViewerPropsStore.actions?.[name]\n        break\n    }\n\n    if (!action) throw Error(`Action '${name}' with type '${type}' not found!`)\n    return action\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get formData() {\n    return this.form.componentTree\n  }\n\n  /**\n   * Clears the form in Form Viewer.\n   */\n  clear() {\n    const oldForm = this.form\n    const componentTree = this.createComponentData(new ComponentStore(screenModel.name, screenModel.type))\n    const localization = new LocalizationStore()\n    this.form = new Form(componentTree, localization, {}, oldForm.languages, oldForm.defaultLanguage)\n    oldForm.dispose()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  dispose() {\n    this.form.dispose()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  get initialDataSlice(): Record<string, unknown> | undefined {\n    if (!this.parentStore || !this.parentComponentStore) return this.formViewerPropsStore.initialData\n    const dataSlice = this.parentStore.initialDataSlice\n    if (isStoreDataInParentForm(this.parentComponentStore)) return dataSlice\n    const projection = dataSlice?.[this.parentComponentStore.key]\n    return isRecord(projection) ? projection : undefined\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reduceScreen<T>(callback: (accumulator: T, current: ComponentData) => T, initialValue: T) {\n    return reduceTree(this.form.componentTree, callback, initialValue, 'children')\n  }\n\n  /**\n   * Searches for an action, returns definition for the found action.\n   * @param actionData the action's data.\n   * @returns the action definition.\n   * @throws Error, if action was not found.\n   */\n  findAction(actionData: ActionData) {\n    return this.getAction(actionData.name, actionData.type)\n  }\n\n  /**\n   * Returns model for the specified type.\n   * @param type the component type.\n   * @returns the model for the specified type.\n   */\n  getModel(type: string) {\n    const model = this.formViewerPropsStore.view.find(type)\n    if (model) return model\n    if (isTemplateType(type)) {\n      const templateModel = this.#templateMap.get(type)\n      return templateModel ?? this.addTemplateModel(type)\n    }\n    return buildInternalErrorModel(`Type '${type}' is not found!`)\n  }\n\n  private addTemplateModel(type: string) {\n    // we don't change the view properties to add a template\n    const templateName = getTemplateName(type)\n    const templateModel = createTemplateModel(templateName)\n    this.#templateMap.set(templateModel.type, templateModel)\n    return templateModel\n  }\n\n  /**\n   * Loads a form by form name and sets that form in the form viewer.\n   * @param getForm the function that loads the form.\n   * @param formName the form name.\n   */\n  loadForm(getForm?: (name?: string) => string | Promise<string>, formName?: string) {\n    if (!getForm) return\n\n    try {\n      const form = getForm(formName)\n      if (isPromise<string>(form)) {\n        form\n          .then(this.applyStringForm.bind(this))\n          .catch(this.#onLoadError.bind(this))\n        return\n      }\n      this.applyStringForm(form)\n    } catch (e) {\n      this.#onLoadError(e)\n    }\n  }\n\n  /**\n   * Creates the element for the component tree.\n   * @param componentStore the component settings.\n   * @param deferFieldCalculation if true, then the calculated field must be explicitly initialized.\n   * @param model the component's metadata.\n   * @returns the element for the component tree.\n   */\n  createComponentData(componentStore: ComponentStore, deferFieldCalculation = false, model?: Model): ComponentData {\n    model ??= this.getModel(componentStore.type)\n    const field = model.valued ? this.createField(componentStore, model, deferFieldCalculation) : undefined\n    const factory = (cs: ComponentStore) => this.createComponentData(cs, deferFieldCalculation)\n    return new ComponentData(componentStore, model, field, factory, this.formViewerPropsStore.formValidators)\n  }\n\n  /**\n   * Returns the object with validators for the specified value type.\n   * @param type the value type.\n   * @returns the object with validators for the specified value type.\n   */\n  getValidationRules(type: SchemaType): FormViewerValidationRules {\n    return {\n      custom: this.formViewerPropsStore.validators?.[type],\n      internal: ZodValidationRules[type]\n    }\n  }\n\n  private createField(componentStore: ComponentStore, model: Model, deferFieldCalculation: boolean) {\n    if (!isTemplateType(model.type)) {\n      return new SimpleField(this, componentStore, model, updateFnValue(this), this.getValidationRules.bind(this), deferFieldCalculation)\n    }\n\n    const childStore = new Store(this.formViewerPropsStore.clone(), this, componentStore)\n    return new TemplateField(componentStore, childStore)\n  }\n\n  /**\n   * Changes the form to the component with an error description.\n   * @param e the error.\n   */\n  #onLoadError(e: any) {\n    console.error(e)\n    const componentStore = buildInternalErrorStore(e)\n    this.applyPersistedForm({\n      form: componentStore,\n      localization: {},\n      defaultLanguage: globalDefaultLanguage.fullCode,\n      languages: []\n    })\n  }\n\n  /**\n   * Populates the value of this store with the values of the saved form.\n   * @param text saved form value.\n   */\n  applyStringForm(text: string) {\n    try {\n      const persistedForm = JSON.parse(text) as PersistedForm\n      this.fixPropertyTypes(persistedForm.form)\n      this.applyPersistedForm(persistedForm)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  private fixPropertyTypes(componentStore: ComponentStore) {\n    // workaround, we need to restore the ComponentStore along with metadata information\n    const properties = propertiesToFix[componentStore.type]\n    properties?.forEach(property => this.fixDateProperty(componentStore, property))\n    componentStore.children?.forEach(child => this.fixPropertyTypes(child))\n  }\n\n  private fixDateProperty(componentStore: ComponentStore, property: string) {\n    const value = componentStore.props[property]?.value\n    if (isString(value) || isNumber(value)) {\n      componentStore.props[property].value = new Date(value)\n    }\n  }\n\n  /**\n   * Populates the value of this store with the values of the saved form.\n   * @param persistedForm saved form value.\n   */\n  applyPersistedForm(persistedForm: PersistedForm) {\n    const oldForm = this.form\n\n    const version = persistedForm.version\n    if (typeof version !== 'undefined' && version !== PersistedFormVersion.version1) {\n      console.warn(`An unsupported version of form '${version}' has been detected. An attempt will be made to upload` +\n        ` the form as version '${PersistedFormVersion.version1}'.`)\n    }\n\n    const componentStore = ComponentStore.createFromObject(persistedForm.form)\n\n    const componentData = this.createComponentData(componentStore, true)\n    const localization = new LocalizationStore(assign({}, persistedForm.localization))\n\n    const languages = persistedForm.languages?.map(Language.clone) ?? []\n    const defaultLanguage = languages.find(l => l.fullCode === persistedForm.defaultLanguage) ?? globalDefaultLanguage\n\n    const actions = createActionValuesFromObject(persistedForm.actions)\n\n    this.form = new Form(componentData, localization, actions, languages, defaultLanguage)\n\n    this.form.errorProps = persistedForm.errorProps ?? {}\n    this.form.tooltipType = persistedForm.tooltipType\n    this.form.errorType = persistedForm.errorType\n\n    // here we initialize the fields after the form is created, since the calculated field values are depends on 'this.form'\n    this.form.initFields()\n    oldForm.dispose()\n  }\n\n  /**\n   * @returns the current display language.\n   */\n  get displayedLanguage(): Language {\n    if (this.parentStore) return this.parentStore.displayedLanguage\n    if (this.formViewerPropsStore.propsLanguage) {\n      const propsLanguage = this.form.languages.find(l => l === this.formViewerPropsStore.propsLanguage)\n      if (propsLanguage) return propsLanguage\n    }\n    return this.selectedLanguage ?? this.form.defaultLanguage\n  }\n\n  /**\n   * Localizes a component store based on the given localization type. If a custom localizer is available, it will be used.\n   * @param type the type of localization.\n   * @param componentStore the component settings.\n   * @returns the Record with the localized properties.\n   */\n  localizeComponent(type: LocalizationType, componentStore: ComponentStore) {\n    if (this.formViewerPropsStore.localizer) return this.formViewerPropsStore.localizer(componentStore, this.displayedLanguage)\n    return localizeProperties(this.form, this.displayedLanguage, componentStore, type)\n  }\n\n  /**\n   * Localizes validator error messages.\n   * @param componentStore the component settings.\n   * @param validationResults the validation results.\n   * @returns the localized error messages joined by space, or undefined if validationResults is undefined.\n   */\n  localizeErrorMessages(componentStore: ComponentStore, validationResults?: ValidationResult[]) {\n    if (!validationResults) return\n    return validationResults.map(result => {\n      const errorMessage = localizeErrorMessage(this.form, this.displayedLanguage, componentStore, result.settings.key)\n      return errorMessage ?? getDefaultErrorMessage(result)\n    }).join(' ')\n  }\n}\n\nfunction updateFnValue(viewerStore: Store) {\n  return function (component: ComponentStore, key: string): [boolean, any?] {\n    const property = component.props[key]\n    if (isFunctionalProperty(property)) {\n      const {result} = calculatePropertyValue(property, viewerStore.form.componentTree)\n      return [true, result]\n    }\n    if (isLocalizedProperty(property)) {\n      const props = viewerStore.localizeComponent('component', component)\n      const value = props[key]\n      return [true, value]\n    }\n    return [false]\n  }\n}\n","import {useEffect, useState} from 'react'\n\n/**\n * Type of disposable object.\n */\nexport type IDisposable = {\n  /**\n   * Performs the tasks necessary to release resources correctly.\n   */\n  dispose: () => void\n}\n\n/**\n * Creates a disposable object and dispose the object when the React component is unmounted. **Internal use only.**\n * @param factory the factory function to create a disposable object.\n * @returns the disposable object.\n */\nexport function useDisposable<T extends IDisposable>(factory: () => T): T | undefined {\n  const [state, setState] = useState<T>()\n\n  useEffect(() => {\n    const disposable = factory()\n    setState(disposable)\n    return () => disposable.dispose()\n    // the dispose function should only be called when a component is unmounted\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return state\n}\n","import type {ForwardedRef} from 'react'\nimport {useEffect} from 'react'\n\n/**\n * Sets the forwarded ref value.\n * @param value the value of ref.\n * @param ref the forwarded ref.\n * @template T the type of value.\n */\nexport function useForwardRef<T>(value?: T, ref?: ForwardedRef<T>): void {\n  useEffect(() => {\n    if (!value || !ref) return\n\n    if (typeof ref === 'function') {\n      ref(value)\n      return\n    }\n\n    ref.current = value\n  }, [value, ref])\n}\n","import {ReactNode, useCallback, useContext, useEffect} from 'react'\nimport {FormViewerPropsStore} from '../../../stores/FormViewerPropsStore'\nimport {Store} from '../../../stores/Store'\nimport {namedObserver} from '../../../utils'\nimport {StoreContext, StoreProvider} from '../../../utils/contexts/StoreContext'\nimport {useDisposable} from '../../../utils/useDisposable'\nimport {useForwardRef} from '../../../utils/useForwardRef'\nimport type {FormViewerProps} from '../types'\nimport {ViewerPropsProvider} from './ViewerPropsContext'\n\n/**\n * Properties of the React component ViewerStoreProvider.\n */\nexport interface ViewerStoreProviderProps {\n\n  /**\n   * Children component.\n   */\n  children: ReactNode\n\n  /**\n   * Form viewer React component properties.\n   */\n  props: FormViewerProps\n}\n\ninterface ExistingStoreProviderProps extends ViewerStoreProviderProps {\n  store: Store\n}\n\nconst RawExistingStoreProvider = ({\n                                  children,\n                                  props: {viewerRef, ...props},\n                                  store\n                                }: ExistingStoreProviderProps) => {\n  useForwardRef(store, viewerRef)\n\n  useEffect(() => {\n    props.onFormDataChange?.(store.formData)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [store.formData.data, store.formData.errors])\n\n  useEffect(() => {\n    store.formViewerPropsStore.applyProps(props)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.initialData, props.view, props.validators, props.formValidators, props.localize, props.language, props.actions])\n\n  return (\n    <ViewerPropsProvider value={props}>\n      <StoreProvider value={store}>\n        {children}\n      </StoreProvider>\n    </ViewerPropsProvider>\n  )\n}\n\nconst ExistingStoreProvider = namedObserver('ExistingStoreProvider', RawExistingStoreProvider)\n\nconst RawNewStoreProvider = ({children, props}: ViewerStoreProviderProps) => {\n  const storeFactory = useCallback(() => new Store(new FormViewerPropsStore(props)), [props])\n  const store = useDisposable(storeFactory)\n\n  if (!store) return null\n\n  return <ExistingStoreProvider children={children} props={props} store={store}/>\n}\n\nconst NewStoreProvider = namedObserver('FactoryStoreProvider', RawNewStoreProvider)\n\n/**\n * React component encapsulating MobX storage for the form viewer.\n * @param props the React component properties.\n * @returns the React element.\n */\nconst RawViewerStoreProvider = (props: ViewerStoreProviderProps) => {\n  const storeFromContext = useContext(StoreContext)\n  return storeFromContext\n    ? <ExistingStoreProvider children={props.children} props={props.props} store={storeFromContext}/>\n    : <NewStoreProvider children={props.children} props={props.props}/>\n}\n\nexport const ViewerStoreProvider = namedObserver('ViewerStoreProvider', RawViewerStoreProvider)\n","import {configure} from 'mobx'\n\n//State can be changed from anywhere\nconfigure({enforceActions: 'never'})\n","import styled from '@emotion/styled'\nimport {namedObserver} from '../../utils'\nimport {TrialMessage} from '../licensing/TrialMessage'\nimport {ViewerLocalizationProvider} from '../localization/ViewerLocalizationProvider'\nimport {SuppressResizeObserverErrors} from '../ui/SuppressResizeObserverErrors'\nimport {Viewer} from './components/Viewer'\nimport {ViewerStoreProvider} from './components/ViewerStoreProvider'\nimport './setupMobx'\nimport {FormViewerProps} from './types'\n\n//No other code here\n/**\n * The main React component of the form viewer.\n * @param props the React component properties.\n * @returns the React element.\n */\nconst RawFormViewer = (props: FormViewerProps) =>\n  <SuppressResizeObserverErrors>\n    <ViewerStoreProvider props={props}>\n      <ViewerLocalizationProvider language={props.language}>\n        <SDiv>\n          <TrialMessage/>\n          <Viewer event={props.event}/>\n        </SDiv>\n      </ViewerLocalizationProvider>\n    </ViewerStoreProvider>\n  </SuppressResizeObserverErrors>\n\nexport const FormViewer = namedObserver('FormViewer', RawFormViewer)\n\nexport const SDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  gap: 5px;\n`\n","import styled from '@emotion/styled'\nimport {useMemo} from 'react'\nimport {Store} from '../../stores/Store'\nimport {ComponentData, useComponentData} from '../../utils/contexts/ComponentDataContext'\nimport {StoreProvider} from '../../utils/contexts/StoreContext'\nimport {createNonNullableContext} from '../../utils/createNonNullableContext'\nimport {commonStyles, getDefaultCss} from '../annotation'\nimport {toStyleProperties} from '../annotation/toStyleProperties'\nimport {Model} from '../define'\nimport {FormViewer, FormViewerProps} from '../form-viewer'\nimport {useViewerProps} from '../form-viewer/components/ViewerPropsContext'\nimport {generateTemplateTypeName, getTemplateName} from '../ui/templateUtil'\nimport {TemplateField} from '../validation/utils/TemplateField'\n\nconst TemplateLoadError = styled.span`\n  font-size: xx-large;\n  color: red;\n`\n\ninterface TemplateContext {\n  data: ComponentData\n  viewerProps: Readonly<FormViewerProps>\n  templateProps: Record<string, any>\n}\n\nexport const [\n  /**\n   * **Internal use only.**\n   */\n  useTemplate,\n  /**\n   * **Internal use only.**\n   */\n  TemplateProvider] = createNonNullableContext<TemplateContext>('TemplateContext')\n\nconst Template = (templateProps: Record<string, any>) => {\n  const viewerProps = useViewerProps()\n  const data = useComponentData()\n  const templateViewerProps = useMemo(() => {\n    const overrideProps: Partial<FormViewerProps> = {\n      formName: getTemplateName(data.store.type),\n      computeChildren: undefined,\n      formValidators: undefined,\n    }\n    return Object.assign({}, viewerProps, overrideProps)\n  }, [data.store.type, viewerProps])\n\n  if (!viewerProps.getForm) return <TemplateLoadError>Please define <code>getForm</code> property!</TemplateLoadError>\n  if (!(data.field instanceof TemplateField)) return null\n  const viewerStore = data.field.viewerStore as Store\n\n  return (\n    <TemplateProvider value={{templateProps, viewerProps, data}}>\n      <StoreProvider value={viewerStore}>\n        <FormViewer {...templateViewerProps}/>\n      </StoreProvider>\n    </TemplateProvider>\n  )\n}\n\nexport const templateStyleProperties = toStyleProperties(commonStyles)\nconst defaultCss = getDefaultCss(templateStyleProperties)\n\n/**\n * Creates the template component metadata for the form viewer.\n * @param name the template name.\n * @returns the template component metadata for the form viewer.\n */\nexport function createTemplateModel(name: string) {\n  const typeName = generateTemplateTypeName(name)\n  const defaultProps = {name, storeDataInParentForm: true}\n  return new Model(Template, name, undefined, typeName, 'object', defaultProps, defaultCss,\n    undefined, typeName, undefined, 'template')\n}\n","import styled from '@emotion/styled'\nimport {Store} from '../../stores/Store'\nimport {namedObserver} from '../../utils'\nimport {ComponentDataProvider, useComponentData} from '../../utils/contexts/ComponentDataContext'\nimport {StoreProvider, useStore} from '../../utils/contexts/StoreContext'\nimport {Model} from '../define'\nimport {ViewerPropsProvider} from '../form-viewer/components/ViewerPropsContext'\nimport {useTemplate} from './templateModel'\n\nconst Slot = () => {\n  const store = useStore()\n  return store.parentStore\n    ? <SlotContent parentStore={store.parentStore}/>\n    : <SlotPlaceholder/>\n}\nSlot.displayName = 'Slot'\n\n/**\n * Form viewer slot metadata. **Internal use only.**\n */\nexport const slotModel = new Model(Slot, 'Slot', undefined, undefined, undefined,\n  undefined, undefined, undefined, undefined, undefined, 'slot')\n\nconst RawSlotContent = ({parentStore}: { parentStore: Store }) => {\n  const {key} = useComponentData()\n  const {viewerProps, data, templateProps} = useTemplate()\n\n  return (\n    <StoreProvider value={parentStore}>\n      <ViewerPropsProvider value={viewerProps}>\n        <ComponentDataProvider value={data}>\n          {templateProps[key]}\n        </ComponentDataProvider>\n      </ViewerPropsProvider>\n    </StoreProvider>\n  )\n}\n\nconst SlotContent = namedObserver('SlotContent', RawSlotContent)\n\nconst RawSlotPlaceholder = () => {\n  const {key} = useComponentData()\n  return <SDiv>Slot: '{key}'</SDiv>\n}\n\nconst SlotPlaceholder = namedObserver('SlotPlaceholder', RawSlotPlaceholder)\n\nconst SDiv = styled.div`\n  background-color: rgb(150, 150, 150, 25%);\n  padding: 5px;\n`\n","import {modules} from '../define/constants'\nimport {Meta} from '../define/utils/Meta'\nimport {slotModel} from './slotModel'\n\nexport const slotMeta = new Meta(slotModel.type, [], [], [], modules,\n  undefined, undefined, slotModel.kind)\n","import {boolean} from '../annotation'\nimport {toArray} from '../annotation/toArray'\nimport {modules} from '../define/constants'\nimport {Meta} from '../define/utils/Meta'\nimport {generateTemplateTypeName} from '../ui/templateUtil'\nimport {templateStyleProperties} from './templateModel'\n\ninterface TemplateProps {\n  storeDataInParentForm?: boolean\n}\n\nconst storeDataInParentForm = boolean\n  .default(true)\n  .calculable(false)\n  .hinted('Store data in parent form')\n  .named('Store data in parent form')\n\n/**\n * Creates the template component metadata for the form builder.\n * @param name the template name.\n * @returns the template component metadata for the form builder.\n */\nexport function createTemplateMeta(name: string) {\n  const typeName = generateTemplateTypeName(name)\n  return new Meta(typeName,\n    toArray<TemplateProps>({\n      storeDataInParentForm,\n    }),\n    [], templateStyleProperties, modules, undefined, undefined, 'template')\n}\n","import type {ComponentType, ReactNode} from 'react'\nimport {BiDi} from '../../localization/bidi'\nimport {Language} from '../../localization/types'\nimport {slotModel} from '../../template'\nimport {internalErrorModel} from '../../ui/internalErrorModel'\nimport {screenModel} from '../../ui/screenModel'\nimport {Model} from './Model'\n\n/**\n * Represents the type of CSS loader. Can be either BiDi or common for both BiDi.\n */\nexport type CssLoaderType = BiDi | 'common'\n\n/**\n * Represents a form viewer Wrapper component.\n */\nexport type FormViewerWrapper = ComponentType<FormViewerWrapperComponentProps>\n\n/**\n * Represents the props for the WrapperComponent. WrapperComponent is a component that wraps the form viewer. Can be added externally.\n */\nexport interface FormViewerWrapperComponentProps {\n  /**\n   * The FormViewer language.\n   */\n  language: Language\n  /**\n   * The React child node.\n   */\n  children: ReactNode\n}\n\n/**\n * Represents all the metadata of the form viewer components.\n */\nexport class View {\n  #modelMap = new Map<string, Model>()\n  #cssLoaders = new Map<BiDi, Array<() => Promise<void>>>\n  #wrappers = new Array<FormViewerWrapper>()\n\n  /**\n   * Static wrapper for the {@link View} constructor.\n   * @param models the components metadata.\n   * @returns the {@link View} instance.\n   */\n  static create(models: Model[]) {\n    return new View(models)\n  }\n\n  /**\n   * Creates an instance of the {@link View}.\n   * @param models the components metadata.\n   */\n  constructor(models: Model[] = []) {\n    this.define(screenModel)\n    this.define(internalErrorModel)\n    this.define(slotModel)\n    models.forEach(this.define.bind(this))\n  }\n\n  /**\n   * Defines the component's metadata for the form viewer.\n   * @param model the component's metadata.\n   */\n  define(model: Model) {\n    this.#modelMap.set(model.type, model)\n  }\n\n  /**\n   * Returns the component's metadata for the form viewer for the specified type.\n   * @param type the component type.\n   * @returns the component metadata for the form viewer for the specified type.\n   */\n  get(type: string) {\n    const result = this.find(type)\n    if (result) return result\n    throw new Error(`Type '${type}' is not found!`)\n  }\n\n  /**\n   * Returns the component's metadata for the form viewer for the specified type.\n   * @param type the component type.\n   * @returns the component metadata for the form viewer for the specified type or undefined.\n   */\n  find(type: string) {\n    return this.#modelMap.get(type)\n  }\n\n  /**\n   * @returns all component metadata for the form viewer.\n   */\n  all() {\n    return [...this.#modelMap.values()]\n  }\n\n  /**\n   * Adds a wrapper to the list of viewers for this viewer wrapper.\n   * @param wrapper  the viewer wrapper to be added. The wrapper is a component that wraps the form viewer.\n   * @returns the {@link View} instance.\n   */\n  withViewerWrapper = (wrapper: FormViewerWrapper) => {\n    this.#wrappers.push(wrapper)\n    return this\n  }\n\n  /**\n   * Retrieves the viewer wrappers array.\n   * @returns the viewer wrappers array.\n   */\n  get viewerWrappers() {\n    return [...this.#wrappers]\n  }\n\n  /**\n   * Applies the given CSS loader to the component based on the BiDi layout.\n   * @param cssLoaderType the BiDi layout type, either 'common', 'ltr', or 'rtl'.\n   * @param loader the function that returns a Promise to load CSS or other required localization resources.\n   * @returns the {@link View} instance.\n   */\n  withCssLoader(cssLoaderType: CssLoaderType, loader: () => Promise<void>) {\n    if (cssLoaderType === 'common') {\n      this.#withCssLoader(BiDi.LTR, loader)\n      this.#withCssLoader(BiDi.RTL, loader)\n    } else {\n      this.#withCssLoader(cssLoaderType, loader)\n    }\n    return this\n  }\n\n  /**\n   * Sets a CSS loader for the specified BiDi direction.\n   * @param biDi the BiDi direction.\n   * @param loader the loader function that returns a Promise.\n   */\n  #withCssLoader(biDi: BiDi, loader: () => Promise<void>) {\n    this.#cssLoaders.set(biDi, [...(this.#cssLoaders.get(biDi) ?? []), loader])\n  }\n\n  /**\n   * Retrieves the CSS loaders for a given BiDi.\n   * @param biDi the BiDi object for which to retrieve the CSS loaders.\n   * @returns the array containing the CSS loaders for the specified BiDi.\n   */\n  getCssLoaders(biDi: BiDi) {\n    return this.#cssLoaders.get(biDi) ?? []\n  }\n}\n\nexport const createView = View.create\n","import type {CSSObject} from '@emotion/serialize/dist/declarations/types'\nimport type {ComponentType, ReactNode} from 'react'\nimport {commonStyles, getDefault, getDefaultCss} from '../../annotation'\nimport {toArray} from '../../annotation/toArray'\nimport {toStyleProperties} from '../../annotation/toStyleProperties'\nimport type {Annotations} from '../../annotation/utils/builders/Annotations'\nimport {modules} from '../constants'\nimport type {ActionsInitializer, ComponentKind} from '../types'\nimport type {BuilderComponent} from './BuilderComponent'\nimport {Meta} from './Meta'\nimport {Model} from './Model'\n\n/**\n * Definer class data.\n * @template T React component property type.\n */\nexport type DefinerData<T extends object> = {\n  /**\n   * The React component.\n   */\n  readonly component: ComponentType<T>,\n  /**\n   * The component name.\n   */\n  name?: string,\n  /**\n   * The component kind.\n   */\n  kind?: ComponentKind,\n  /**\n   * The component category.\n   */\n  category?: string,\n  /**\n   * The CSS metadata.\n   */\n  cssObject?: Annotations<CSSObject>,\n  /**\n   * The component icon.\n   */\n  icon?: ComponentType,\n  /**\n   * The function that initializes an actions on a component (for internal use only).\n   */\n  readonly actionsInitializer?: ActionsInitializer,\n  /**\n   * The property metadata.\n   */\n  properties?: Annotations<T>,\n  /**\n   * The custom component to display in the component list (unused).\n   */\n  customPreview?: ReactNode,\n}\n\n/**\n * The builder class to define the metadata of the form builder component.\n * @template T React component property type.\n */\nexport class Definer<T extends object> {\n  /**\n   * Definer class data.\n   * @template T React component property type.\n   */\n  data: DefinerData<T>\n\n  /**\n   * Static method to create an instance of the component's metadata builder class.\n   * @param component the React component.\n   * @param displayName the display name for the anonymous component.\n   * @returns the instance of the {@link Definer} class.\n   */\n  static define<T extends object>(component: ComponentType<T>, displayName?: string) {\n    const name = displayName ?? component.displayName ?? component.name\n    if (!name) throw Error('Anonymous components are not allowed!')\n    const definer = new Definer<T>(component)\n    if (displayName) definer.type(displayName)\n    return definer\n  }\n\n  private constructor(component: ComponentType<T>) {\n    this.data = {component}\n  }\n\n  /**\n   * Sets the name of the component.\n   * @param name the component name.\n   * @returns the modified Definer class instance.\n   */\n  name = (name: string) => this.#updateWith({name})\n\n  /**\n   * Sets the kind of the component.\n   * @param kind the component kind.\n   * @returns the modified Definer class instance.\n   */\n  kind = (kind: ComponentKind) => this.#updateWith({kind})\n\n  /**\n   * Sets the icon of the component.\n   * @param icon the component icon.\n   * @returns the modified Definer class instance.\n   */\n  icon = (icon: ComponentType) => this.#updateWith({icon})\n\n  /**\n   * Sets the category of the component.\n   * @param category the component category.\n   * @returns the modified Definer class instance.\n   */\n  category = (category: string) => this.#updateWith({category})\n\n  /**\n   * Sets the type of the component.\n   * @param type the component type.\n   * @returns the modified Definer class instance.\n   */\n  type = (type: string) => {\n    this.data.component.displayName = type\n    return this\n  }\n\n  /**\n   * Sets the metadata of the component's properties.\n   * @param properties the metadata of the component's properties.\n   * @returns the modified Definer class instance.\n   */\n  props = (properties: Annotations<T>) => this.#updateWith({properties})\n\n  /**\n   * Sets the component CSS metadata.\n   * @param css the component CSS metadata.\n   * @returns the modified Definer class instance.\n   */\n  css = (css: Annotations<CSSObject>): Definer<T> => this.#updateWith({cssObject: css})\n\n  /**\n   * Adds the metadata of the component's actions. **Internal use only.**\n   * @param fn the function that initializes an actions on a component.\n   * @returns the modified Definer class instance.\n   */\n  actions = (fn: ActionsInitializer) => this.#updateWith({actionsInitializer: fn})\n\n  /**\n   * Adds the custom component to be displayed in the component list. **Internal use only.**\n   * @param customPreview the custom component.\n   * @returns the modified Definer class instance.\n   */\n  preview = (customPreview: ReactNode) => this.#updateWith({customPreview})\n\n  /**\n   * @returns the component type name.\n   */\n  getType(): string {\n    return this.data.component.displayName || this.data.component.name\n  }\n\n  /**\n   * Creates component metadata for the form builder and form viewer.\n   * @returns component metadata for the form builder and form viewer.\n   */\n  build(): BuilderComponent {\n    const propAns = toArray(this.data.properties)\n    const cssAns = toStyleProperties(this.data.cssObject)\n    const cssWrapperAns = toStyleProperties(commonStyles)\n    const valuedAnnotations = propAns.filter(an => an.valued === true)\n    const firstValuedAn = valuedAnnotations[0]\n    if (valuedAnnotations.length > 1) {\n      console.warn('Several annotations with the \"valued\" property were found.' +\n        ' There should be only one \"valued\" property in the component description!' +\n        ` The annotation with the key \"${valuedAnnotations[0].key}\" will be used.`)\n    }\n    const valuedAn = firstValuedAn ?? propAns.find(an => an.name === 'value')\n\n    const model = new Model(\n      this.data.component,\n      this.data.name || this.getType(),\n      this.data.actionsInitializer,\n      valuedAn?.key,\n      valuedAn?.type,\n      getDefault(propAns),\n      getDefaultCss(cssAns),\n      getDefaultCss(cssWrapperAns),\n      this.getType(),\n      this.data.icon,\n      this.data.kind\n    )\n\n    const meta = new Meta(\n      this.getType(),\n      propAns,\n      cssAns,\n      cssWrapperAns,\n      modules,\n      this.data.customPreview,\n      valuedAn,\n      this.data.kind\n    )\n\n    return {model, meta, category: this.data.category} as const\n  }\n\n  /**\n   * Modifies the component's metadata builder with custom options.\n   * @param opts the custom options.\n   * @returns the modified instance of the builder.\n   */\n  #updateWith(opts: Partial<DefinerData<T>>): Definer<T> {\n    Object.assign(this.data, opts)\n    return this\n  }\n}\n\nexport const define = Definer.define\n","import {css, cx} from '@emotion/css'\nimport styled from '@emotion/styled'\nimport type {ReactNode} from 'react'\nimport {Model} from '../../define'\n\n/**\n * Properties of the React component that wraps the form view component and displays validation errors.\n */\nexport interface ErrorWrapperProps {\n  /**\n   * The error text.\n   */\n  error?: string\n  /**\n   * The wrapped component.\n   */\n  children?: ReactNode\n  /**\n   * The CSS class name.\n   */\n  className?: string\n}\n\nconst ErrorMessageStyle = css`\n  font-size: 12px;\n  color: var(--red-600);\n  margin-top: 0.25rem;\n\n  &:before {\n    content: \"❌ \";\n    font-size: 10px;\n    padding: 6px;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    color: var(--red-300);\n  }\n`\n\nconst SDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n`\n\nconst DefaultErrorMessage = ({children, error, className}: ErrorWrapperProps) => {\n  return (\n    <SDiv>\n      {children}\n      {error && <p className={cx(className, ErrorMessageStyle)} children={error}/>}\n    </SDiv>\n  )\n}\nDefaultErrorMessage.displayName = 'DefaultErrorMessage'\n\n/**\n * The component metadata for error message. **Internal use only.**\n */\nexport const errorMessageModel = new Model(DefaultErrorMessage)\n","import {Meta} from '../define/utils/Meta'\nimport {internalErrorModel} from '../ui/internalErrorModel'\n\nexport const internalErrorMeta = new Meta(internalErrorModel.type, [], [], [], [])\n","import type {ScreenProps} from '../../types'\nimport {node} from '../annotation'\nimport {toArray} from '../annotation/toArray'\nimport {modules} from '../define/constants'\nimport {Meta} from '../define/utils/Meta'\nimport {screenModel, screenStyleProperties} from '../ui/screenModel'\n\nexport const screenMeta = new Meta(\n  screenModel.type,\n  toArray<ScreenProps>({children: node}),\n  screenStyleProperties,\n  [],\n  modules,\n  undefined,\n  undefined,\n  'container'\n)\n","import {string} from '../annotation'\nimport {toArray} from '../annotation/toArray'\nimport {Meta} from '../define/utils/Meta'\nimport {errorMessageModel, ErrorWrapperProps} from './components/DefaultErrorMessage'\n\nexport const errorMessageMeta = new Meta(errorMessageModel.type,\n  toArray<ErrorWrapperProps>({\n    className: string,\n  }), [], [], [])\n","import {Annotation} from '../../annotation/types/annotations/Annotation'\nimport {internalErrorMeta} from '../../components/internalErrorMeta'\nimport {screenMeta} from '../../components/screenMeta'\nimport {createTemplateMeta, createTemplateModel, slotMeta, slotModel} from '../../template'\nimport {errorMessageMeta} from '../../validation/errorMessageMeta'\nimport {BuilderComponent} from './BuilderComponent'\nimport {Meta} from './Meta'\nimport {View} from './View'\n\nconst templatesCategoryName = 'templates'\n\n/**\n * Represents all the metadata of the form builder components.\n */\nexport class BuilderView extends View {\n  #metaMap = new Map<string, Meta>()\n  #tooltipsMeta = new Map<string, Meta>()\n  #errorMeta = new Map<string, Meta>([\n    [errorMessageMeta.type, errorMessageMeta],\n  ])\n\n  /**\n   * Returns the component metadata for the specified component type name.\n   * @param type the component type name.\n   * @returns the component metadata for the specified component type name.\n   */\n  getMeta(type: string) {\n    const result = this.#metaMap.get(type)\n    if (result) return result\n    return internalErrorMeta\n  }\n\n  /**\n   * Returns the component metadata for the specified component type name or undefined.\n   * @param type the component type name.\n   * @returns the component metadata for the specified component type name or undefined.\n   */\n  findMeta(type: string) {\n    return this.#metaMap.get(type)\n  }\n\n  /**\n   * Returns the array of metadata properties of the tooltip component.\n   * @param name the name of the tooltip component type.\n   * @returns the array of metadata properties of the tooltip component.\n   */\n  getTooltipAnnotations(name: string): Annotation[] | undefined {\n    return this.#tooltipsMeta.get(name)?.properties\n  }\n\n  /**\n   * Returns the array of metadata properties of the error component.\n   * @param name the name of the error component type.\n   * @returns the array of metadata properties of the error component.\n   */\n  getErrorAnnotations(name: string): Annotation[] | undefined {\n    return this.#errorMeta.get(name)?.properties\n  }\n\n  /**\n   * @returns the array of strings with the names of the component types of the tooltip.\n   */\n  get tooltips() {\n    return Array.from(this.#tooltipsMeta.keys())\n  }\n\n  /**\n   * @returns the array of strings with the names of the component types of the error.\n   */\n  get errors() {\n    return Array.from(this.#errorMeta.keys())\n  }\n\n  /**\n   * Sets the metadata of the component that displays the form's tooltips.\n   * @param builderComponent the metadata of the component that displays the form's tooltips.\n   * @returns the instance of the {@link BuilderView} class.\n   */\n  withTooltipMeta(builderComponent: BuilderComponent): this {\n    const {model, meta} = builderComponent\n    this.define(model)\n    this.#tooltipsMeta.set(model.type, meta)\n    return this\n  }\n\n  /**\n   * Sets the metadata of the component that displays form's errors.\n   * @param builderComponent the metadata of the component that displays the form's errors.\n   * @returns the instance of the {@link BuilderView} class.\n   */\n  withErrorMeta(builderComponent: BuilderComponent): this {\n    const {model, meta} = builderComponent\n    this.define(model)\n    this.#errorMeta.set(model.type, meta)\n    return this\n  }\n\n  /**\n   * Creates metadata for the form builder for templates from the specified template names.\n   * @param templates the array of template names.\n   * @returns the instance of the {@link BuilderView} class.\n   */\n  withTemplates(templates: string[]): this {\n    templates.forEach(name => {\n      const builderComponent = BuilderView.createTemplateComponent(name)\n      this.define(builderComponent.model)\n      this.#metaMap.set(builderComponent.meta.type, builderComponent.meta)\n      this.builderComponents.push(builderComponent)\n    })\n    return this\n  }\n\n  /**\n   * Creates an instance of BuilderComponent for the specified template name.\n   * @param name the template name\n   * @returns the BuilderComponent instance.\n   */\n  static createTemplateComponent(name: string): BuilderComponent {\n    const model = createTemplateModel(name)\n    const meta = createTemplateMeta(name)\n    return {meta, model, category: templatesCategoryName}\n  }\n\n  /**\n   * Creates metadata for form builder components.\n   * @param builderComponents the array of metadata of form builder components.\n   */\n  constructor(public builderComponents: BuilderComponent[]) {\n    super(builderComponents.map(({model}) => model))\n    this.#metaMap.set(screenMeta.type, screenMeta)\n    this.#metaMap.set(internalErrorMeta.type, internalErrorMeta)\n    this.#metaMap.set(slotMeta.type, slotMeta)\n    this.builderComponents.push({meta: slotMeta, model: slotModel, category: templatesCategoryName})\n\n    const metas = builderComponents.map(({meta}) => meta)\n\n    metas.forEach(meta => {\n      this.#metaMap.set(meta.type, meta)\n    })\n  }\n}\n","import {ValidationMessages} from '../features/validation/types/ValidationResult'\n\n/**\n * The interface for accessing the form data.\n */\nexport interface IFormData {\n  /**\n   * @returns the Record with all the form data.\n   */\n  get data(): Record<string, unknown>\n\n  /**\n   * @returns the Record with all validation error messages.\n   */\n  get errors(): Record<string, unknown>\n\n  /**\n   * true if the form contains errors, otherwise false.\n   */\n  get hasErrors(): boolean\n\n  /**\n   * @returns A user-defined key-value observable storage. Utilize it to store and share any custom data.\n   */\n  get state(): Record<string, unknown>\n\n  /**\n   * Sets the validation error message for all form data fields.\n   * @param message the validation error message.\n   */\n  setAllErrors: (message?: string) => void\n\n  /**\n   * Validates the data in the form.\n   */\n  validate: () => Promise<void>\n\n  /**\n   * Returns the validation results without triggering an events and changing the state of the form.\n   * @returns the {@link ValidationMessages} validation results.\n   */\n  getValidationResult: () => Promise<ValidationMessages>\n\n  /**\n   * If true, then validation is in progress.\n   */\n  get isValidating(): boolean\n\n  /**\n   * Sets the form to its default value.\n   */\n  reset: () => void\n\n  /**\n   * Clears the form data.\n   */\n  clear: () => void\n}\n\n/**\n * Description of the form data for the code editor.\n */\nexport const IFormDataDeclaration = `declare interface IFormData {\n  /**\n   * @returns the {@link Record} with all the form data.\n   */\n  get data(): Record<string, unknown>\n\n  /**\n   * @returns the {@link Record} with all validation error messages.\n   */\n  get errors(): Record<string, unknown>\n\n  /**\n   * true if the form contains errors, otherwise false.\n   */\n  get hasErrors(): boolean\n\n  /**\n   * @returns A user-defined key-value observable storage. Utilize it to store and share any custom data.\n   */\n  get state(): Record<string, unknown>\n\n  /**\n   * Sets the validation error message for all form data fields.\n   * @param message the validation error message.\n   */\n  setAllErrors(message?: string): void\n\n  /**\n   * Validates the data in the form.\n   */\n  validate(): Promise<void>\n    \n  /**\n   * Returns the validation results without triggering an events and changing the state of the form.\n   * @returns the validation results.\n   */\n  getValidationResult: () => Promise<ValidationMessages>\n\n  /**\n   * If true, then validation is in progress.\n   */\n  get isValidating(): boolean\n\n  /**\n   * Sets the form to its default value.\n   */\n  reset(): void\n\n  /**\n   * Clears the form data.\n   */\n  clear(): void\n}`\n","import {isObject, upperFirst} from 'lodash-es'\n\n/**\n * The element with the value and the label.\n */\nexport interface LabeledValue {\n  /**\n   * The value.\n   */\n  value: string | number;\n  /**\n   * The label.\n   */\n  label?: string;\n}\n\n/**\n * Converts the array of elements into the array of {@link LabeledValue} elements.\n * @param items the array of elements.\n * @param upper if true, the first character in {@link LabeledValue.label} will be capitalized.\n * @returns the array of {@link LabeledValue} elements.\n */\nexport const toLabeledValues = (items: string[] | LabeledValue[], upper = true) =>\n  items.map(item => ({\n    value: isObject(item) ? item.value : item,\n    label: isObject(item)\n      ? item.label\n      : (upper ? upperFirst(item) : item)\n  }))\n","/**\n * Represents a relationship attribute value used in HTML.\n */\nexport type Rel = 'stylesheet' | string\n\n/**\n * Loads a resource into the document head asynchronously. **Internal use only.**\n * @param id the identifier of the resource.\n * @param href represents a URL to the resource.\n * @param rel the relationship of the resource to the document.\n * @returns the promise that resolves when the resource has been loaded successfully.\n */\nexport const loadResource = (id: string, href: string, rel: Rel) => {\n  return new Promise<void>((resolve, reject) => {\n    if (document.getElementById(id)) return resolve()\n\n    const link = document.createElement('link')\n    link.id = id\n    link.rel = rel\n    link.href = href\n    link.onload = () => {\n      resolve()\n    }\n    link.onerror = reject\n\n    document.head.appendChild(link)\n  })\n}\n\n/**\n * Unloads a resource from the DOM based on its ID. **Internal use only.**\n * @param id the ID of the resource to unload.\n */\nexport const unloadResource = (id: string) => {\n  const link = document.getElementById(id)\n  link?.parentNode?.removeChild(link)\n}\n"],"names":["getKey","groupBy","array","predicate","acc","value","index","_a","Model","component","name","actionsInitializer","valued","valueType","defaultProps","css","wrapperCss","typeName","icon","kind","__privateAdd","_name","__publicField","observer","__privateSet","__privateGet","BiDi","Annotation","key","ContainerAnnotation","EventAnnotation","ModuleAnnotation","PropertyAnnotation","isProperty","StyleAnnotation","AnnotationMap","BuilderOptions","BaseBuilder","hint","calculable","options","annotationType","autoName","annotation","clone","assign","lodashClone","props","startCase","TypedBuilder","validator","errorMap","ArrayBuilder","builder","QuantifierBuilder","labels","result","OneOfBuilder","SomeOfBuilder","_AnnotationBuilder","editor","type","values","AnnotationBuilder","isContainer","createAnnotation","createProperty","getDefault","annotations","an","getDefaultCss","NodeAnnotationBuilder","slotConditionBuilder","createNodeAnnotation","isUniqueKey","store","cd","htmlAttributes","validation","string","boolean","number","size","date","color","tooltipType","cssSize","cssColor","className","event","node","oneOf","someOf","tooltipProps","renderWhen","commonStyles","containerStyles","AsyncFunction","ActionDefinition","func","body","params","createActionValuesFromObject","obj","DidMountEvent","WillUnmountEvent","createComponentDataProxy","componentData","target","property","ActionEventArgs","sender","args","state","_componentDataProxy","_isEvent","_isNotEvent","v","ActionEventArgsDeclaration","modules","Meta","properties","customPreview","valuedAn","KeySymbol","nameAutorun","owner","nameObservableEntity","nameObservable","observableName","paramsString","actionDataCounter","initActionDataKey","actionData","initActionDataKeys","componentStore","events","data","isFunctionalProperty","componentProperty","isLocalizedProperty","ComponentStore","makeAutoObservable","eventName","isString","isNumber","isPromise","isRecord","namedObserver","displayName","observerComponent","emptyComponentStore","getFluentCompatibleId","rawId","isFluentVariable","getFluentData","fluentData","createNonNullableContext","context","createContext","hook","createContextHook","provider","createProvider","useContext","SyncEvent","handler","h","eventArgs","treeForEach","tree","fn","child","findTreeElementDepth","element","depth","childNode","counter","generateId","prefix","ComponentKeyChangedEventArgs","oldKey","newKey","ComponentDataEvents","ComponentData","model","field","childFactory","formValidators","_disposers","_events","_formValidators","childComponentStore","reaction","newParent","inserted","i","found","root","keysMap","keysList","item","count","withCount","allNodes","fieldValue","initializedData","initFormFields","errors","message","f","fields","customValidatorPromises","resultValue","messages","getFieldMessages","isEmpty","source","initialValue","isArray","merge","entries","getFormMessages","position","indexAddition","children","_b","storeChildren","storeIndex","nodes","disposer","newChild","oldChild","form","useComponentData","ComponentDataProvider","useStore","StoreProvider","StoreContext","useViewerProps","ViewerPropsProvider","toArray","setup","reduce","prev","toStyleProperties","useSafeState","initialState","mountedRef","useRef","setState","useState","useEffect","safeSetState","useCallback","useMemo","assemblyDate","separator","licenseSeparator","publicKeyPem","decodeB64","byteStr","bytes","importPublicKey","pem","verifySign","signature","publicKeyString","publicKey","encoded","verifyLicenseParams","licensePrefix","licenseEndDate","restrictions","companyName","dateParts","isoDt","licenseEndDt","currentDate","verifyLicenseKey","licenseKey","separatorIndex","license","extractedData","extractedSign","TrialMessage","verified","setVerified","jsx","SDiv","SLabel","styled","emotionCache","createCache","rtlPlugin","viewerClassName","RawViewerLocalizationProvider","viewerStore","language","loader","e","selectedCache","CacheProvider","nestViewerWrappers","ViewerLocalizationProvider","Wrapper","more","SuppressResizeObserverErrors","defaultOnErrorFn","resizeObserverErrDiv","resizeObserverErr","EventStream","stream","newStream","filter","keys","types","observerOrNext","subscription","useComponentTreeContext","ComponentTreeContextProvider","CalculableResult","error","exceptions","fnCache","getOrCreateFn","calculateValue","fnSource","formViewerData","calculatePropertyValue","calculateExpressionProperty","calculateProperties","isUndefined","getHtmlAttributes","computeEvents","hasActions","eventNames","keysIn","ComponentState","localizer","computeChildren","propsWithoutChildren","cx","cssPart","viewMode","cssObjectAny","_d","_c","cssObjectCurrent","_f","_e","_h","_g","_j","_i","_l","_k","needRender","formData","defaultContainerKey","getChildren","componentTreeItem","componentProps","containers","ComponentTree","currentProps","groups","isSlotConditionSatisfied","checkSlotCondition","isNeedRender","filteredChildren","childStore","parentProps","useTooltipType","useWrapperState","componentKey","componentModel","wrapperProps","getWrapperState","useTooltipComponent","formViewerProps","selectedTooltipType","RawTooltipWrapper","tooltipDefinition","ComponentTooltip","TooltipWrapper","RawComponentTooltip","wrappedComponentData","wrappedComponentStore","localize","componentState","createElement","useErrorModel","errorType","view","errorMessageModel","useEventListener","listener","eventSubject","listenerRef","RawErroneous","errorDefinition","errorProps","Erroneous","getDefaultErrorMessage","concatErrorMessages","_DataValidator","setter","errorMessageLocalizer","_subject","Subject","_subscriptions","_stream","_validator","promise","resolve","subscribe","next","s","debounceTime","map","switchMap","resolver","DataValidator","DefaultWrapper","useComponentMountUnmount","init","clear","clearRef","initRef","useActions","subsRef","unsubscribe","createSubscriptions","forIn","actionDataList","actionChain","actionDefinition","action","getActionHandler","concatMap","catchError","err","caught","mountEvent","unmountEvent","actionArgs","RawComponentViewer","componentWrapper","viewerComputeChildren","formViewerStore","componentTree","Component","containerClassName","Tooltip","Fragment","ContainerComponent","ComponentViewer","RawComponentTreeItem","ComponentTreeItem","RawComponentTree","getViewMode","width","useAutoViewMode","onResize","RawViewer","Viewer","customActionsToActionsValues","actions","FormViewerPropsStore","View","makeObservable","observable","commonActions","validatorBlockPrefix","getValidatorPropertyBlockType","ruleKey","isValidatorPropertyBlockType","testFluentLocalization","request","localizationSting","resource","FluentResource","bundle","FluentBundle","localizeProperties","defaultBundle","fluentBundle","getFluentBundles","messageId","localizeErrorMessage","Language","code","dialect","description","bidi","Screen","height","flexDirection","gap","screenStyleProperties","defaultCss","screenModel","SH1","InternalError","internalErrorModel","buildInternalErrorStore","screen","buildInternalErrorModel","templateTypeNamePrefix","generateTemplateTypeName","getTemplateName","isTemplateType","ruleBuilder","required","defaultValue","editorType","validatorFactory","zodAnyToValidator","zodValidator","scheme","z","ZodArrayRules","length","limit","ZodBooleanRules","arg","ZodDateRules","ZodNumberRules","ZodObjectRules","ZodStringRules","regex","offset","precision","checker","ZodValidationRules","same","from","parse","stringify","toString","ifInstanceThenSame","constructor","toNumber","toDate","converters","getValueType","autoConvertField","toType","fromType","converter","typedValidatorsResolver","validationRules","schema","validatorsResolver","validators","validationResults","settings","param","ruleResult","noOpValidator","rules","byPriority","toValidator","rule","definition","_","b","SimpleField","valueCalculator","getValidationRules","deferFieldCalculation","_oldDataValidator","autorun","untracked","simpleValue","calculated","dispose","isStoreDataInParentForm","val","TemplateField","errorObject","generateUniqueName","existingNames","time","Form","localization","languages","defaultLanguage","oldActionName","newAction","namedAction","actionName","newActionParamNames","bindings","FluentBundleHolder","languageFullCode","localizationStore","_getLocalizationItems","componentsLocalization","__privateMethod","getLocalizationItems_fn","localizationItems","allComponentsLocalizationConstants","componentLocalizationConstants","propertyName","localizationConstant","LocalizationStore","fluentCompatibleComponentKey","fluentCompatiblePropertyName","holder","oldComponentKey","newComponentKey","fluentCompatibleOldComponentKey","fluentCompatibleNewComponentKey","PersistedFormVersion","propertiesToFix","reduceTree","callback","childKey","accumulator","globalDefaultLanguage","_Store","formViewerPropsStore","parentStore","parentComponentStore","_onLoadError","_templateMap","oldForm","dataSlice","projection","templateName","templateModel","createTemplateModel","getForm","formName","onLoadError_fn","factory","cs","updateFnValue","text","persistedForm","version","l","propsLanguage","Store","useDisposable","disposable","useForwardRef","ref","RawExistingStoreProvider","viewerRef","ExistingStoreProvider","RawNewStoreProvider","storeFactory","NewStoreProvider","RawViewerStoreProvider","storeFromContext","ViewerStoreProvider","configure","RawFormViewer","FormViewer","TemplateLoadError","useTemplate","TemplateProvider","Template","templateProps","viewerProps","templateViewerProps","overrideProps","templateStyleProperties","Slot","SlotContent","SlotPlaceholder","slotModel","RawSlotContent","RawSlotPlaceholder","slotMeta","storeDataInParentForm","createTemplateMeta","_View","models","_withCssLoader","_modelMap","_cssLoaders","_wrappers","wrapper","cssLoaderType","withCssLoader_fn","biDi","createView","_Definer","_updateWith","updateWith_fn","category","definer","propAns","cssAns","cssWrapperAns","valuedAnnotations","firstValuedAn","meta","opts","Definer","define","ErrorMessageStyle","DefaultErrorMessage","internalErrorMeta","screenMeta","errorMessageMeta","templatesCategoryName","_BuilderView","builderComponents","_metaMap","_tooltipsMeta","_errorMeta","builderComponent","templates","BuilderView","IFormDataDeclaration","toLabeledValues","items","upper","isObject","upperFirst","loadResource","id","href","rel","reject","link","unloadResource"],"mappings":"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"}